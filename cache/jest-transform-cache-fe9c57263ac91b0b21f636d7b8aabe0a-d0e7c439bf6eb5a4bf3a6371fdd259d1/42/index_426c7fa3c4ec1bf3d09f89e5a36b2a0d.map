{"version":3,"sources":["index.js"],"names":["Line","props","disabled","restricted","lineType","lineWidth","activeLineWidth","disabledLineWidth","baseColor","tintColor","errorColor","focusAnimation","borderColor","borderWidth","interpolate","inputRange","outputRange","borderStyle","labelWidth","labelAnimation","contentInset","labelOffset","left","borderRadius","lineOffset","Animated","add","topLineContainerStyle","transform","scaleX","I18nManager","isRTL","translateX","multiply","leftContainerStyle","width","rightContainerStyle","right","topContainerStyle","lineStyle","borderProps","styles","topContainer","topLineContainer","borderTop","rightContainer","borderRight","bottomContainer","borderBottom","leftContainer","borderLeft","PureComponent","defaultProps","propTypes","PropTypes","oneOf","bool","string","number","instanceOf","Value","shape"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment, PureComponent } from 'react';\nimport { View, Animated, I18nManager } from 'react-native';\n\nimport styles, { borderRadius } from './styles';\n\nexport default class Line extends PureComponent {\n  static defaultProps = {\n    lineType: 'solid',\n    disabled: false,\n    restricted: false,\n  };\n\n  static propTypes = {\n    lineType: PropTypes.oneOf(['solid', 'none']),\n\n    disabled: PropTypes.bool,\n    restricted: PropTypes.bool,\n\n    tintColor: PropTypes.string,\n    baseColor: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n    disabledLineWidth: PropTypes.number,\n\n    focusAnimation: PropTypes.instanceOf(Animated.Value),\n    labelAnimation: PropTypes.instanceOf(Animated.Value),\n    labelWidth: PropTypes.instanceOf(Animated.Value),\n\n    contentInset: PropTypes.shape({\n      left: PropTypes.number,\n      right: PropTypes.number,\n    }),\n  };\n\n  borderProps() {\n    let {\n      disabled,\n      restricted,\n      lineType,\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      baseColor,\n      tintColor,\n      errorColor,\n      focusAnimation,\n    } = this.props;\n\n    if (disabled) {\n      return {\n        borderColor: baseColor,\n        borderWidth: disabledLineWidth,\n      };\n    }\n\n    if (restricted) {\n      return {\n        borderColor: errorColor,\n        borderWidth: activeLineWidth,\n      };\n    }\n\n    return {\n      borderColor: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      }),\n\n      borderWidth: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      }),\n\n      borderStyle: lineType,\n    };\n  }\n\n  render() {\n    let { lineType, labelWidth, labelAnimation, contentInset } = this.props;\n\n    if ('none' === lineType) {\n      return null;\n    }\n\n    let labelOffset = 2 * (contentInset.left - 2 * borderRadius);\n    let lineOffset = Animated.add(labelWidth, labelOffset);\n\n    let topLineContainerStyle = {\n      transform: [{\n        scaleX: I18nManager.isRTL? -1 : 1,\n      }, {\n        translateX: Animated.multiply(labelAnimation, lineOffset),\n      }],\n    };\n\n    let leftContainerStyle = {\n      width: contentInset.left - borderRadius,\n    };\n\n    let rightContainerStyle = {\n      width: contentInset.right - borderRadius,\n    };\n\n    let topContainerStyle = {\n      left: leftContainerStyle.width,\n      right: rightContainerStyle.width,\n    };\n\n    let lineStyle = this.borderProps();\n\n    return (\n      <Fragment>\n        <View style={[styles.topContainer, topContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.topLineContainer, topLineContainerStyle]}>\n            <Animated.View style={[styles.borderTop, lineStyle]} />\n          </Animated.View>\n        </View>\n\n        <View style={[styles.rightContainer, rightContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderRight, lineStyle]} />\n        </View>\n\n        <View style={styles.bottomContainer} pointerEvents='none'>\n          <Animated.View style={[styles.borderBottom, lineStyle]} />\n        </View>\n\n        <View style={[styles.leftContainer, leftContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderLeft, lineStyle]} />\n        </View>\n      </Fragment>\n    );\n  }\n}\n"]}