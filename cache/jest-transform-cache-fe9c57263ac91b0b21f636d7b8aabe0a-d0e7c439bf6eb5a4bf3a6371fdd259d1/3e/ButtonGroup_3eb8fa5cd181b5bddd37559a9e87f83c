d9bbeb2e01af6460b76165985cd7ea53
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonGroup = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _Text = _interopRequireDefault(require("../text/Text"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ButtonGroup = function ButtonGroup(props) {
  var theme = props.theme,
      rest = (0, _objectWithoutProperties2.default)(props, ["theme"]);
  var Component = rest.Component,
      buttons = rest.buttons,
      _onPress = rest.onPress,
      selectedIndex = rest.selectedIndex,
      selectedIndexes = rest.selectedIndexes,
      selectMultiple = rest.selectMultiple,
      containerStyle = rest.containerStyle,
      innerBorderStyle = rest.innerBorderStyle,
      lastBorderStyle = rest.lastBorderStyle,
      buttonStyle = rest.buttonStyle,
      textStyle = rest.textStyle,
      selectedTextStyle = rest.selectedTextStyle,
      selectedButtonStyle = rest.selectedButtonStyle,
      _rest$underlayColor = rest.underlayColor,
      underlayColor = _rest$underlayColor === void 0 ? theme.colors.primary : _rest$underlayColor,
      activeOpacity = rest.activeOpacity,
      onHideUnderlay = rest.onHideUnderlay,
      onShowUnderlay = rest.onShowUnderlay,
      setOpacityTo = rest.setOpacityTo,
      containerBorderRadius = rest.containerBorderRadius,
      disabled = rest.disabled,
      disabledStyle = rest.disabledStyle,
      disabledTextStyle = rest.disabledTextStyle,
      disabledSelectedStyle = rest.disabledSelectedStyle,
      disabledSelectedTextStyle = rest.disabledSelectedTextStyle,
      attributes = (0, _objectWithoutProperties2.default)(rest, ["Component", "buttons", "onPress", "selectedIndex", "selectedIndexes", "selectMultiple", "containerStyle", "innerBorderStyle", "lastBorderStyle", "buttonStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "containerBorderRadius", "disabled", "disabledStyle", "disabledTextStyle", "disabledSelectedStyle", "disabledSelectedTextStyle"]);
  var innerBorderWidth = 1;

  if (innerBorderStyle && Object.prototype.hasOwnProperty.call(innerBorderStyle, 'width')) {
    innerBorderWidth = innerBorderStyle.width;
  }

  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle && containerStyle])
  }), buttons.map(function (button, i) {
    var isSelected = selectedIndex === i || selectedIndexes.includes(i);
    var isDisabled = disabled === true || Array.isArray(disabled) && disabled.includes(i);
    return _react.default.createElement(_reactNative.View, {
      key: i,
      style: _reactNative.StyleSheet.flatten([styles.button, i < buttons.length - 1 && {
        borderRightWidth: i === 0 ? 0 : innerBorderWidth,
        borderRightColor: innerBorderStyle && innerBorderStyle.color || theme.colors.grey4
      }, i === 1 && {
        borderLeftWidth: innerBorderWidth,
        borderLeftColor: innerBorderStyle && innerBorderStyle.color || theme.colors.grey4
      }, i === buttons.length - 1 && _objectSpread({}, lastBorderStyle, {
        borderTopRightRadius: containerBorderRadius,
        borderBottomRightRadius: containerBorderRadius
      }), i === 0 && {
        borderTopLeftRadius: containerBorderRadius,
        borderBottomLeftRadius: containerBorderRadius
      }])
    }, _react.default.createElement(Component, {
      testID: "buttonGroupItem",
      activeOpacity: activeOpacity,
      setOpacityTo: setOpacityTo,
      onHideUnderlay: onHideUnderlay,
      onShowUnderlay: onShowUnderlay,
      underlayColor: underlayColor,
      disabled: isDisabled,
      onPress: function onPress() {
        if (selectMultiple) {
          if (selectedIndexes.includes(i)) {
            _onPress(selectedIndexes.filter(function (index) {
              return index !== i;
            }));
          } else {
            _onPress([].concat((0, _toConsumableArray2.default)(selectedIndexes), [i]));
          }
        } else {
          _onPress(i);
        }
      },
      style: styles.button
    }, _react.default.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.textContainer, buttonStyle && buttonStyle, isSelected && {
        backgroundColor: theme.colors.primary
      }, isSelected && selectedButtonStyle && selectedButtonStyle, isDisabled && styles.disabled, isDisabled && disabledStyle, isDisabled && isSelected && styles.disabledSelected(theme), isDisabled && isSelected && disabledSelectedStyle])
    }, button.element ? _react.default.createElement(button.element, null) : _react.default.createElement(_Text.default, {
      testID: "buttonGroupItemText",
      style: _reactNative.StyleSheet.flatten([styles.buttonText(theme), textStyle && textStyle, isSelected && {
        color: '#fff'
      }, isSelected && selectedTextStyle, isDisabled && styles.disabledText(theme), isDisabled && disabledTextStyle, isDisabled && isSelected && disabledSelectedTextStyle])
    }, button))));
  }));
};

exports.ButtonGroup = ButtonGroup;
var styles = {
  button: {
    flex: 1
  },
  textContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    marginLeft: 10,
    marginRight: 10,
    marginBottom: 5,
    marginTop: 5,
    borderColor: '#e3e3e3',
    borderWidth: 1,
    flexDirection: 'row',
    borderRadius: 3,
    overflow: 'hidden',
    backgroundColor: '#fff',
    height: 40
  },
  buttonText: function buttonText(theme) {
    return _objectSpread({
      fontSize: (0, _helpers.normalizeText)(13),
      color: theme.colors.grey2
    }, _reactNative.Platform.select({
      android: {},
      default: {
        fontWeight: '500'
      }
    }));
  },
  disabled: {
    backgroundColor: 'transparent'
  },
  disabledText: function disabledText(theme) {
    return {
      color: (0, _helpers.color)(theme.colors.disabled).darken(0.3).toString()
    };
  },
  disabledSelected: function disabledSelected(theme) {
    return {
      backgroundColor: theme.colors.disabled
    };
  }
};
ButtonGroup.propTypes = {
  button: _propTypes.default.object,
  Component: _propTypes.default.elementType,
  onPress: _propTypes.default.func,
  buttons: _propTypes.default.array,
  containerStyle: _config.ViewPropTypes.style,
  textStyle: _reactNative.Text.propTypes.style,
  selectedTextStyle: _reactNative.Text.propTypes.style,
  selectedButtonStyle: _config.ViewPropTypes.style,
  underlayColor: _propTypes.default.string,
  selectedIndex: _propTypes.default.number,
  selectedIndexes: _propTypes.default.arrayOf(_propTypes.default.number),
  activeOpacity: _propTypes.default.number,
  onHideUnderlay: _propTypes.default.func,
  onShowUnderlay: _propTypes.default.func,
  setOpacityTo: _propTypes.default.func,
  innerBorderStyle: _propTypes.default.shape({
    color: _propTypes.default.string,
    width: _propTypes.default.number
  }),
  lastBorderStyle: _propTypes.default.oneOfType([_config.ViewPropTypes.style, _reactNative.Text.propTypes.style]),
  buttonStyle: _config.ViewPropTypes.style,
  containerBorderRadius: _propTypes.default.number,
  selectMultiple: _propTypes.default.bool,
  theme: _propTypes.default.object,
  disabled: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.number)]),
  disabledStyle: _config.ViewPropTypes.style,
  disabledTextStyle: _reactNative.Text.propTypes.style,
  disabledSelectedStyle: _config.ViewPropTypes.style,
  disabledSelectedTextStyle: _reactNative.Text.propTypes.style
};
ButtonGroup.defaultProps = {
  selectedIndex: null,
  selectedIndexes: [],
  selectMultiple: false,
  containerBorderRadius: 3,
  disabled: false,
  Component: _reactNative.Platform.select({
    android: _reactNative.TouchableNativeFeedback,
    default: _reactNative.TouchableOpacity
  }),
  onPress: function onPress() {
    return null;
  }
};

var _default = (0, _config.withTheme)(ButtonGroup, 'ButtonGroup');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,