cd357954763aede58d5a4b71e96a2f0b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignUpPage = _interopRequireDefault(require("../../src/Component/Login/SignUpPage1"));

var _SignUpPage2 = _interopRequireDefault(require("../../src/Component/Login/SignUpPage2"));

var _SignUpPage3 = _interopRequireDefault(require("../../src/Component/Login/SignUpPage3"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _this = this;

var wrapper1 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage.default, null));
it('SignUpPage1 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage.default, null));
});
describe('<SignUpPage1/>', function () {
  it('SignUpPage1 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper1.state('firstName')).toEqual('');
    expect(wrapper1.state('lastName')).toEqual('');
  });
  var firstName = wrapper1.find('OutlinedTextField').first();
  var lastName = wrapper1.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    firstName.props().onChangeText('Aditya');
    lastName.props().onChangeText('Gawde');
    expect(wrapper1.state('firstName')).toEqual('Aditya');
    expect(wrapper1.state('lastName')).toEqual('Gawde');
  });
  it('props of OutlinedTextField', function () {
    expect(firstName.findWhere(function (node) {
      return node.prop('label') === 'First name';
    })).toExist();
    expect(lastName.findWhere(function (node) {
      return node.prop('label') === 'Last name';
    })).toExist();
    expect(firstName.findWhere(function (node) {
      return node.prop('value') === _this.state.firstName;
    })).toExist();
    expect(lastName.findWhere(function (node) {
      return node.prop('value') === _this.state.lastName;
    })).toExist();
  });
  it('testing validateForm mathod for first name and last name validation', function () {
    var instance = wrapper1.instance();
    expect(instance.validateForm()).toBe(true);
    firstName.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    lastName.props().onChangeText('');
    expect(instance.validateForm()).toBe(true);
  });
});
var wrapper2 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage2.default, null));
it('SignUpPage2 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage2.default, null));
});
describe('<SignUpPage2/>', function () {
  it('SignUpPage2 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage2.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper2.state('email')).toEqual('');
  });
});
var wrapper3 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage3.default, null));
it('SignUpPage3 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage3.default, null));
});
describe('<SignUpPage3/>', function () {
  it('SignUpPage3 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage3.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper3.state('password')).toEqual('');
    expect(wrapper3.state('confirm')).toEqual('');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,