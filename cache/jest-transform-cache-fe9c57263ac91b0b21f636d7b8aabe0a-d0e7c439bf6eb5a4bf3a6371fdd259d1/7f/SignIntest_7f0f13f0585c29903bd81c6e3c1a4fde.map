{"version":3,"sources":["SignIn-test.js"],"names":["wrapper","it","renderer","create","describe","expect","toMatchSnapshot","state","toEqual","emailInput","find","first","passInput","last","props","onChangeText","findWhere","node","prop","toExist","instance","validateForm","toBe","createButton","simulate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport SignIn from \"../../src/Component/Login/SignIn\";\n\n\nimport renderer from 'react-test-renderer';\n\nconst wrapper = shallow(<SignIn />)\n\n/**************************** SignIn Component Testing ******************************/\n\nit('SignIn Page renders correctly', () => {\n    renderer.create(<SignIn />);\n});\n\ndescribe('<SignIn/>', () => {\n    it('SignIn Page renders correctly', () => {\n        expect(shallow(<SignIn />)).toMatchSnapshot();\n    });\n\n    it('checking initial state', () => {\n        expect(wrapper.state('email')).toEqual('');\n        expect(wrapper.state('password')).toEqual('');\n    })\n\n    const emailInput = wrapper.find('OutlinedTextField').first();\n    const passInput = wrapper.find('OutlinedTextField').last();\n\n    it('testing state of component after onChangeText event occur', () => {\n\n        emailInput.props().onChangeText('andy@gmail.com');\n\n        passInput.props().onChangeText('Abc@1234');\n\n        expect(wrapper.state('email')).toEqual('andy@gmail.com');\n        expect(wrapper.state('password')).toEqual('Abc@1234');\n    })\n\n    it('props of OutlinedTextField', () => {\n        expect(emailInput.findWhere((node) => node.prop('label') === 'Email')).toExist();\n        expect(emailInput.findWhere((node) => node.prop('errorColor') === 'red')).toExist();\n    });\n\n    it('testing validateForm mathod for email validation', () => {\n\n        const instance = wrapper.instance()\n        expect(instance.validateForm()).toBe(true)\n\n        emailInput.props().onChangeText('andygmail.com');\n        expect(instance.validateForm()).toBe(false)\n\n        emailInput.props().onChangeText('andy@gmail.com');\n        expect(instance.validateForm()).toBe(true)\n\n    })\n\n    it('testing validateForm mathod for password validation', () => {\n\n        const instance = wrapper.instance()\n\n        passInput.props().onChangeText('');\n        expect(instance.validateForm()).toBe(false)\n\n        passInput.props().onChangeText('Abc@1234');\n        expect(instance.validateForm()).toBe(true)\n    })\n\n    it('testing create Account Button', () => {\n        // wrapper.find('Button').first().invoke('onPress')().then(() => {\n        //     //expect(wrapper.props())\n        //     console.log(wrapper.props())\n        // });\n        const createButton = wrapper.find('Button').first()\n        // .findWhere((title) => title.prop('title') === 'Create Account' );\n        // createButton.invoke('onPress')().then(()=>{\n        //     console.log(wrapper.props())\n        // })\n        createButton.simulate('click')\n    })\n});\n"]}