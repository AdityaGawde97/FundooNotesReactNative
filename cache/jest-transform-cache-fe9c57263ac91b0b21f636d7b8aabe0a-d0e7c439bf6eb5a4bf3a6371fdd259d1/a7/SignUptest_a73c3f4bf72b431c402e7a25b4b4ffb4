3b0513f84ed0ad640e83cfe26d05ee52
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignUpPage = _interopRequireDefault(require("../../src/Component/Login/SignUpPage1"));

var _SignUpPage2 = _interopRequireDefault(require("../../src/Component/Login/SignUpPage2"));

var _SignUpPage3 = _interopRequireDefault(require("../../src/Component/Login/SignUpPage3"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var wrapper1 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage.default, null));
it('SignUpPage1 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage.default, null));
});
describe('<SignUpPage1/>', function () {
  it('SignUpPage1 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper1.state('firstName')).toEqual('');
    expect(wrapper1.state('lastName')).toEqual('');
  });
  var firstName = wrapper1.find('OutlinedTextField').first();
  var lastName = wrapper1.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    firstName.props().onChangeText('Aditya');
    lastName.props().onChangeText('Gawde');
    expect(wrapper1.state('firstName')).toEqual('Aditya');
    expect(wrapper1.state('lastName')).toEqual('Gawde');
  });
  it('props of OutlinedTextField', function () {
    expect(firstName.findWhere(function (node) {
      return node.prop('label') === 'First name';
    })).toExist();
    expect(lastName.findWhere(function (node) {
      return node.prop('label') === 'Last name';
    })).toExist();
  });
  it('testing validateForm mathod for first name and last name validation', function () {
    var instance = wrapper1.instance();
    expect(instance.validateForm()).toBe(true);
    firstName.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    lastName.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
  });
});
var wrapper2 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage2.default, null));
it('SignUpPage2 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage2.default, null));
});
describe('<SignUpPage2/>', function () {
  it('SignUpPage2 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage2.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper2.state('email')).toEqual('');
  });
  var emailInput = wrapper2.find('OutlinedTextField').first();
  it('testing state of component after onChangeText event occur', function () {
    emailInput.props().onChangeText('andy@gmail.com');
    expect(wrapper2.state('email')).toEqual('andy@gmail.com');
  });
  it('props of OutlinedTextField', function () {
    expect(emailInput.findWhere(function (node) {
      return node.prop('label') === 'Email';
    })).toExist();
    expect(emailInput.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper2.instance();
    expect(instance.validateForm()).toBe(true);
    emailInput.props().onChangeText('andygmail.com');
    expect(instance.validateForm()).toBe(false);
    emailInput.props().onChangeText('andy@gmail.com');
    expect(instance.validateForm()).toBe(true);
  });
});
var wrapper3 = (0, _enzyme.shallow)(_react.default.createElement(_SignUpPage3.default, null));
it('SignUpPage3 Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignUpPage3.default, null));
});
describe('<SignUpPage3/>', function () {
  it('SignUpPage3 Matching SnapShot', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignUpPage3.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper3.state('password')).toEqual('');
    expect(wrapper3.state('confirm')).toEqual('');
  });
  var password = wrapper3.find('OutlinedTextField').first();
  var confirm = wrapper3.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    password.props().onChangeText('Abc@1234');
    confirm.props().onChangeText('Abc@1234');
    expect(wrapper3.state('password')).toEqual('Abc@1234');
    expect(wrapper3.state('confirm')).toEqual('Abc@1234');
  });
  it('props of OutlinedTextField', function () {
    expect(password.findWhere(function (node) {
      return node.prop('label') === 'Password';
    })).toExist();
    expect(password.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
    expect(confirm.findWhere(function (node) {
      return node.prop('label') === 'Confirm';
    })).toExist();
    expect(confirm.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper3.instance();
    expect(instance.validateForm()).toBe(true);
    password.props().onChangeText('Abc1234');
    expect(instance.validateForm()).toBe(false);
    password.props().onChangeText('abc@dgdfhd');
    expect(instance.validateForm()).toBe(false);
    password.props().onChangeText('abc1234');
    expect(instance.validateForm()).toBe(false);
    password.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
    confirm.props().onChangeText('Xyz@1234');
    expect(instance.validateForm()).toBe(false);
    confirm.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing visible password toggling', function () {
    expect(wrapper3.find('TouchableOpacity').length).toBe(1);
    expect(wrapper3.state('visibleIcon')).toEqual(false);
    var passIcon = wrapper3.find('TouchableOpacity');
    passIcon.simulate('press');
    expect(wrapper3.state('visibleIcon')).toEqual(true);
    passIcon.simulate('press');
    expect(wrapper3.state('visibleIcon')).toEqual(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,