9ae494d02d09072143cb9af777fef985
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _Input = _interopRequireDefault(require("../input/Input"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ANDROID_GRAY = 'rgba(0, 0, 0, 0.54)';
var defaultSearchIcon = {
  type: 'material',
  size: 25,
  color: ANDROID_GRAY,
  name: 'search'
};
var defaultCancelIcon = {
  type: 'material',
  size: 25,
  color: ANDROID_GRAY,
  name: 'arrow-back'
};
var defaultClearIcon = {
  type: 'material',
  size: 25,
  color: ANDROID_GRAY,
  name: 'clear'
};

var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);

  function SearchBar(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SearchBar);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SearchBar).call(this, props));

    _this.focus = function () {
      _this.input.focus();
    };

    _this.blur = function () {
      _this.input.blur();
    };

    _this.clear = function () {
      _this.input.clear();

      _this.onChangeText('');

      _this.props.onClear();
    };

    _this.cancel = function () {
      _this.blur();

      _this.props.onCancel();
    };

    _this.onFocus = function () {
      _this.props.onFocus();

      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };

    _this.onBlur = function () {
      _this.props.onBlur();

      _this.setState({
        hasFocus: false
      });
    };

    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);

      _this.setState({
        isEmpty: text === ''
      });
    };

    var value = props.value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true
    };
    return _this;
  }

  (0, _createClass2.default)(SearchBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          clearIcon = _this$props.clearIcon,
          containerStyle = _this$props.containerStyle,
          leftIconContainerStyle = _this$props.leftIconContainerStyle,
          rightIconContainerStyle = _this$props.rightIconContainerStyle,
          inputContainerStyle = _this$props.inputContainerStyle,
          inputStyle = _this$props.inputStyle,
          searchIcon = _this$props.searchIcon,
          cancelIcon = _this$props.cancelIcon,
          showLoading = _this$props.showLoading,
          loadingProps = _this$props.loadingProps,
          attributes = (0, _objectWithoutProperties2.default)(_this$props, ["clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "searchIcon", "cancelIcon", "showLoading", "loadingProps"]);
      var _this$state = this.state,
          hasFocus = _this$state.hasFocus,
          isEmpty = _this$state.isEmpty;
      var loadingStyle = loadingProps.style,
          otherLoadingProps = (0, _objectWithoutProperties2.default)(loadingProps, ["style"]);
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        testID: "searchInput"
      }, attributes, {
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onChangeText: this.onChangeText,
        ref: function ref(input) {
          _this2.input = input;
        },
        containerStyle: {
          paddingHorizontal: 0
        },
        inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
        inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
        leftIcon: hasFocus ? (0, _helpers.renderNode)(_Icon.default, cancelIcon, _objectSpread({}, defaultCancelIcon, {
          onPress: this.cancel
        })) : (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon),
        leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
        rightIcon: _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, showLoading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
          key: "loading",
          style: _reactNative.StyleSheet.flatten([{
            marginRight: 5
          }, loadingStyle])
        }, otherLoadingProps)), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, _objectSpread({}, defaultClearIcon, {
          key: 'cancel',
          onPress: this.clear
        }))),
        rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
      })));
    }
  }]);
  return SearchBar;
}(_react.Component);

SearchBar.propTypes = {
  value: _propTypes.default.string,
  clearIcon: _helpers.nodeType,
  searchIcon: _helpers.nodeType,
  cancelIcon: _helpers.nodeType,
  loadingProps: _propTypes.default.object,
  showLoading: _propTypes.default.bool,
  containerStyle: _config.ViewPropTypes.style,
  leftIconContainerStyle: _config.ViewPropTypes.style,
  rightIconContainerStyle: _config.ViewPropTypes.style,
  inputContainerStyle: _config.ViewPropTypes.style,
  inputStyle: _reactNative.Text.propTypes.style,
  onClear: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onChangeText: _propTypes.default.func
};
SearchBar.defaultProps = {
  value: '',
  loadingProps: {},
  showLoading: false,
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  },
  searchIcon: defaultSearchIcon,
  clearIcon: defaultClearIcon,
  cancelIcon: defaultCancelIcon
};

var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'white',
    paddingTop: 8,
    paddingBottom: 8
  },
  input: {
    marginLeft: 24,
    marginRight: 8
  },
  inputContainer: {
    borderBottomWidth: 0,
    width: '100%'
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  }
});

var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,