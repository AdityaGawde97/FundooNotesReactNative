24b794c8d2049e85d8e7e15db48ea7a9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _ReactNativeVersion = require("react-native/Libraries/Core/ReactNativeVersion");

var ENABLE_SCREENS = false;

var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {
  return typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ? _reactNative.UIManager.getViewManagerConfig(name) : _reactNative.UIManager[name];
};

function enableScreens() {
  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  ENABLE_SCREENS = shouldEnableScreens;

  if (ENABLE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
    console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
  }
}

function useScreens() {
  var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  console.warn('Method `useScreens` is deprecated, please use `enableScreens`');
  enableScreens(shouldUseScreens);
}

function screensEnabled() {
  return ENABLE_SCREENS;
}

var NativeScreenValue;
var NativeScreenContainerValue;
var NativeScreenStack;
var NativeScreenStackHeaderConfig;
var NativeScreenStackHeaderSubview;
var AnimatedNativeScreen;
var ScreensNativeModules = {
  get NativeScreen() {
    NativeScreenValue = NativeScreenValue || (0, _reactNative.requireNativeComponent)('RNSScreen', null);
    return NativeScreenValue;
  },

  get NativeScreenContainer() {
    NativeScreenContainerValue = NativeScreenContainerValue || (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);
    return NativeScreenContainerValue;
  },

  get NativeScreenStack() {
    NativeScreenStack = NativeScreenStack || (0, _reactNative.requireNativeComponent)('RNSScreenStack', null);
    return NativeScreenStack;
  },

  get NativeScreenStackHeaderConfig() {
    NativeScreenStackHeaderConfig = NativeScreenStackHeaderConfig || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderConfig', null);
    return NativeScreenStackHeaderConfig;
  },

  get NativeScreenStackHeaderSubview() {
    NativeScreenStackHeaderSubview = NativeScreenStackHeaderSubview || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderSubview', null);
    return NativeScreenStackHeaderSubview;
  }

};

var Screen = function (_React$Component) {
  (0, _inherits2.default)(Screen, _React$Component);

  function Screen() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Screen);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Screen)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.setRef = function (ref) {
      _this._ref = ref;
      _this.props.onComponentRef && _this.props.onComponentRef(ref);
    };

    return _this;
  }

  (0, _createClass2.default)(Screen, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      this._ref.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      if (!ENABLE_SCREENS) {
        var _this$props = this.props,
            active = _this$props.active,
            onComponentRef = _this$props.onComponentRef,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["active", "onComponentRef"]);
        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, props, {
          ref: this.setRef
        }));
      } else {
        AnimatedNativeScreen = AnimatedNativeScreen || _reactNative.Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);

        if (_ReactNativeVersion.version.minor >= 57 || _ReactNativeVersion.version.minor === 0) {
          return _react.default.createElement(AnimatedNativeScreen, (0, _extends2.default)({}, this.props, {
            ref: this.setRef
          }));
        } else {
          var _this$props2 = this.props,
              style = _this$props2.style,
              children = _this$props2.children,
              rest = (0, _objectWithoutProperties2.default)(_this$props2, ["style", "children"]);
          return _react.default.createElement(AnimatedNativeScreen, (0, _extends2.default)({}, rest, {
            ref: this.setRef,
            style: _reactNative.StyleSheet.absoluteFill
          }), _react.default.createElement(_reactNative.Animated.View, {
            style: style
          }, children));
        }
      }
    }
  }]);
  return Screen;
}(_react.default.Component);

var ScreenContainer = function (_React$Component2) {
  (0, _inherits2.default)(ScreenContainer, _React$Component2);

  function ScreenContainer() {
    (0, _classCallCheck2.default)(this, ScreenContainer);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ScreenContainer).apply(this, arguments));
  }

  (0, _createClass2.default)(ScreenContainer, [{
    key: "render",
    value: function render() {
      if (!ENABLE_SCREENS) {
        return _react.default.createElement(_reactNative.View, this.props);
      } else {
        return _react.default.createElement(ScreensNativeModules.NativeScreenContainer, this.props);
      }
    }
  }]);
  return ScreenContainer;
}(_react.default.Component);

var styles = _reactNative.StyleSheet.create({
  headerSubview: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, {
    type: "back",
    style: styles.headerSubview
  }, _react.default.createElement(_reactNative.Image, (0, _extends2.default)({
    resizeMode: "center",
    fadeDuration: 0
  }, props)));
};

var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, (0, _extends2.default)({}, props, {
    type: "right",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, (0, _extends2.default)({}, props, {
    type: "left",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderTitleView = function ScreenStackHeaderTitleView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, (0, _extends2.default)({}, props, {
    type: "title",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, (0, _extends2.default)({}, props, {
    type: "center",
    style: styles.headerSubview
  }));
};

module.exports = {
  ScreenContainer: ScreenContainer,
  Screen: Screen,

  get NativeScreen() {
    return ScreensNativeModules.NativeScreen;
  },

  get NativeScreenContainer() {
    return ScreensNativeModules.NativeScreenContainer;
  },

  get ScreenStack() {
    return ScreensNativeModules.NativeScreenStack;
  },

  get ScreenStackHeaderConfig() {
    return ScreensNativeModules.NativeScreenStackHeaderConfig;
  },

  get ScreenStackHeaderSubview() {
    return ScreensNativeModules.NativeScreenStackHeaderSubview;
  },

  ScreenStackHeaderBackButtonImage: ScreenStackHeaderBackButtonImage,
  ScreenStackHeaderRightView: ScreenStackHeaderRightView,
  ScreenStackHeaderLeftView: ScreenStackHeaderLeftView,
  ScreenStackHeaderTitleView: ScreenStackHeaderTitleView,
  ScreenStackHeaderCenterView: ScreenStackHeaderCenterView,
  enableScreens: enableScreens,
  useScreens: useScreens,
  screensEnabled: screensEnabled
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,