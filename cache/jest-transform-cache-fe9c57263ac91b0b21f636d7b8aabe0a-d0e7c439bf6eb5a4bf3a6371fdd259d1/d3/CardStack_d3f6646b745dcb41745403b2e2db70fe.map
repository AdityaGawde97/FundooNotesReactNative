{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","dimensions","Dimensions","layout","width","height","MaybeScreenContainer","enabled","rest","Platform","MaybeScreen","active","FALLBACK_DESCRIPTOR","Object","options","getHeaderHeights","routes","descriptors","curr","previous","StyleSheet","safeAreaInsets","headerStatusBarHeight","acc","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getProgressFromGesture","distance","gesture","inputRange","outputRange","CardStack","React","Component","props","state","gestures","descriptor","animationEnabled","Animated","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","headerHeights","handleLayout","e","handleHeaderLayout","previousHeight","insets","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","top","right","bottom","left","styles","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","onContentHeightChange","styleInterpolator","style","container","flex","overflow","floating","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst dimensions = Dimensions.get('window');\nconst layout = { width: dimensions.width, height: dimensions.height };\n\nconst MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    return <ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  state: State = {\n    routes: [],\n    scenes: [],\n    gestures: {},\n    layout,\n    descriptors: this.props.descriptors,\n    // Used when card's header is null and mode is float to make transition\n    // between screens with headers and those without headers smooth.\n    // This is not a great heuristic here. We don't know synchronously\n    // on mount what the header height is so we have just used the most\n    // common cases here.\n    headerHeights: {},\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={mode !== 'modal'}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // Display current screen and a screen beneath.\n            // On Android screen beneath is hidden on animation finished bs of RNS's issue.\n            const isScreenActive =\n              index === self.length - 1\n                ? 1\n                : Platform.OS === 'android'\n                ? scene.progress.next\n                  ? scene.progress.next.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, 0],\n                      extrapolate: 'clamp',\n                    })\n                  : 1\n                : index === self.length - 2\n                ? 1\n                : 0;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={mode !== 'modal'}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={scenes[index - 1]}\n                  state={state}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              state,\n              getPreviousRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}