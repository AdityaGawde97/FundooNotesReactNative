dd23a65fa54946468090854b56b63fca
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tooltip = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _Triangle = _interopRequireDefault(require("./Triangle"));

var _getTooltipCoordinate2 = _interopRequireWildcard(require("./getTooltipCoordinate"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Tooltip = function (_React$PureComponent) {
  (0, _inherits2.default)(Tooltip, _React$PureComponent);

  function Tooltip() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      isVisible: false,
      yOffset: 0,
      xOffset: 0,
      elementWidth: 0,
      elementHeight: 0
    };

    _this.toggleTooltip = function () {
      var onClose = _this.props.onClose;

      _this.getElementPosition();

      _this.setState(function (prevState) {
        if (prevState.isVisible && !_helpers.isIOS) {
          onClose && onClose();
        }

        return {
          isVisible: !prevState.isVisible
        };
      });
    };

    _this.wrapWithPress = function (toggleOnPress, children) {
      if (toggleOnPress) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: _this.toggleTooltip,
          activeOpacity: 1
        }, children);
      }

      return children;
    };

    _this.getTooltipStyle = function () {
      var _this$state = _this.state,
          yOffset = _this$state.yOffset,
          xOffset = _this$state.xOffset,
          elementHeight = _this$state.elementHeight,
          elementWidth = _this$state.elementWidth;
      var _this$props = _this.props,
          height = _this$props.height,
          backgroundColor = _this$props.backgroundColor,
          width = _this$props.width,
          withPointer = _this$props.withPointer,
          containerStyle = _this$props.containerStyle;

      var _getTooltipCoordinate = (0, _getTooltipCoordinate2.default)(xOffset, yOffset, elementWidth, elementHeight, _helpers.ScreenWidth, _helpers.ScreenHeight, width, height, withPointer),
          x = _getTooltipCoordinate.x,
          y = _getTooltipCoordinate.y;

      return _objectSpread({
        position: 'absolute',
        left: x,
        top: y,
        width: width,
        height: height,
        backgroundColor: backgroundColor,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        flex: 1,
        borderRadius: 10,
        padding: 10
      }, containerStyle);
    };

    _this.renderPointer = function (tooltipY) {
      var _this$state2 = _this.state,
          yOffset = _this$state2.yOffset,
          xOffset = _this$state2.xOffset,
          elementHeight = _this$state2.elementHeight,
          elementWidth = _this$state2.elementWidth;
      var _this$props2 = _this.props,
          backgroundColor = _this$props2.backgroundColor,
          pointerColor = _this$props2.pointerColor;
      var pastMiddleLine = yOffset > tooltipY;
      return _react.default.createElement(_reactNative.View, {
        style: {
          position: 'absolute',
          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,
          left: xOffset + (0, _getTooltipCoordinate2.getElementVisibleWidth)(elementWidth, xOffset, _helpers.ScreenWidth) / 2 - 7.5
        }
      }, _react.default.createElement(_Triangle.default, {
        style: {
          borderBottomColor: pointerColor || backgroundColor
        },
        isDown: pastMiddleLine
      }));
    };

    _this.renderContent = function (withTooltip) {
      var _this$props3 = _this.props,
          popover = _this$props3.popover,
          withPointer = _this$props3.withPointer,
          toggleOnPress = _this$props3.toggleOnPress,
          highlightColor = _this$props3.highlightColor;

      if (!withTooltip) {
        return _this.wrapWithPress(toggleOnPress, _this.props.children);
      }

      var _this$state3 = _this.state,
          yOffset = _this$state3.yOffset,
          xOffset = _this$state3.xOffset,
          elementWidth = _this$state3.elementWidth,
          elementHeight = _this$state3.elementHeight;

      var tooltipStyle = _this.getTooltipStyle();

      return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
        style: {
          position: 'absolute',
          top: yOffset,
          left: xOffset,
          backgroundColor: highlightColor,
          overflow: 'visible',
          width: elementWidth,
          height: elementHeight
        }
      }, _this.props.children), withPointer && _this.renderPointer(tooltipStyle.top), _react.default.createElement(_reactNative.View, {
        style: tooltipStyle,
        testID: "tooltipPopoverContainer"
      }, popover));
    };

    _this.getElementPosition = function () {
      _this.renderedElement && _this.renderedElement.measure(function (frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) {
        _this.setState({
          xOffset: pageOffsetX,
          yOffset: _helpers.isIOS ? pageOffsetY : pageOffsetY - _reactNative.StatusBar.currentHeight,
          elementWidth: width,
          elementHeight: height
        });
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      setTimeout(this.getElementPosition, 500);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var isVisible = this.state.isVisible;
      var _this$props4 = this.props,
          onClose = _this$props4.onClose,
          withOverlay = _this$props4.withOverlay,
          overlayColor = _this$props4.overlayColor,
          onOpen = _this$props4.onOpen;
      return _react.default.createElement(_reactNative.View, {
        collapsable: false,
        ref: function ref(e) {
          _this2.renderedElement = e;
        }
      }, this.renderContent(false), _react.default.createElement(_reactNative.Modal, {
        animationType: "fade",
        visible: isVisible,
        transparent: true,
        onDismiss: onClose,
        onShow: onOpen,
        onRequestClose: onClose
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        style: styles.container(withOverlay, overlayColor),
        onPress: this.toggleTooltip,
        activeOpacity: 1
      }, this.renderContent(true))));
    }
  }]);
  return Tooltip;
}(_react.default.PureComponent);

exports.Tooltip = Tooltip;
Tooltip.propTypes = {
  children: _propTypes.default.element,
  withPointer: _propTypes.default.bool,
  popover: _propTypes.default.element,
  toggleOnPress: _propTypes.default.bool,
  height: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  containerStyle: _config.ViewPropTypes.style,
  pointerColor: _propTypes.default.string,
  onClose: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  overlayColor: _propTypes.default.string,
  withOverlay: _propTypes.default.bool,
  backgroundColor: _propTypes.default.string,
  highlightColor: _propTypes.default.string
};
Tooltip.defaultProps = {
  withOverlay: true,
  overlayColor: 'rgba(250, 250, 250, 0.70)',
  highlightColor: 'transparent',
  withPointer: true,
  toggleOnPress: true,
  height: 40,
  width: 150,
  containerStyle: {},
  backgroundColor: '#617080',
  onClose: function onClose() {},
  onOpen: function onOpen() {}
};
var styles = {
  container: function container(withOverlay, overlayColor) {
    return {
      backgroundColor: withOverlay ? overlayColor : 'transparent',
      flex: 1
    };
  }
};

var _default = (0, _config.withTheme)(Tooltip, 'Tooltip');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,