b2a93672b4c4b644053b5395116752aa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignIn = _interopRequireDefault(require("../../src/Component/Login/SignIn"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null));
it('SignIn Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignIn.default, null));
});
describe('<SignIn/>', function () {
  it('SignIn Page renders correctly', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper.state('email')).toEqual('');
    expect(wrapper.state('password')).toEqual('');
  });
  var emailInput = wrapper.find('OutlinedTextField').first();
  var passInput = wrapper.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    emailInput.props().onChangeText('andy@gmail.com');
    passInput.props().onChangeText('Abc@1234');
    expect(wrapper.state('email')).toEqual('andy@gmail.com');
    expect(wrapper.state('password')).toEqual('Abc@1234');
  });
  it('props of OutlinedTextField', function () {
    expect(emailInput.findWhere(function (node) {
      return node.prop('label') === 'Email';
    })).toExist();
    expect(emailInput.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper.instance();
    expect(instance.validateForm()).toBe(true);
    emailInput.props().onChangeText('andygmail.com');
    expect(instance.validateForm()).toBe(false);
    emailInput.props().onChangeText('andy@gmail.com');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing validateForm mathod for password validation', function () {
    var instance = wrapper.instance();
    passInput.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    passInput.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing create Account Button', function () {
    var createButton = wrapper.find('Button');
    createButton.simulate('click');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpZ25Jbi10ZXN0LmpzIl0sIm5hbWVzIjpbIndyYXBwZXIiLCJpdCIsInJlbmRlcmVyIiwiY3JlYXRlIiwiZGVzY3JpYmUiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJzdGF0ZSIsInRvRXF1YWwiLCJlbWFpbElucHV0IiwiZmluZCIsImZpcnN0IiwicGFzc0lucHV0IiwibGFzdCIsInByb3BzIiwib25DaGFuZ2VUZXh0IiwiZmluZFdoZXJlIiwibm9kZSIsInByb3AiLCJ0b0V4aXN0IiwiaW5zdGFuY2UiLCJ2YWxpZGF0ZUZvcm0iLCJ0b0JlIiwiY3JlYXRlQnV0dG9uIiwic2ltdWxhdGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBRUEsSUFBTUEsT0FBTyxHQUFHLHFCQUFRLDZCQUFDLGVBQUQsT0FBUixDQUFoQjtBQUlBQyxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBTTtBQUN0Q0MsNkJBQVNDLE1BQVQsQ0FBZ0IsNkJBQUMsZUFBRCxPQUFoQjtBQUNILENBRkMsQ0FBRjtBQUlBQyxRQUFRLENBQUMsV0FBRCxFQUFjLFlBQU07QUFDeEJILEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFNO0FBQ3RDSSxJQUFBQSxNQUFNLENBQUMscUJBQVEsNkJBQUMsZUFBRCxPQUFSLENBQUQsQ0FBTixDQUE0QkMsZUFBNUI7QUFDSCxHQUZDLENBQUY7QUFJQUwsRUFBQUEsRUFBRSxDQUFDLHdCQUFELEVBQTJCLFlBQU07QUFDL0JJLElBQUFBLE1BQU0sQ0FBQ0wsT0FBTyxDQUFDTyxLQUFSLENBQWMsT0FBZCxDQUFELENBQU4sQ0FBK0JDLE9BQS9CLENBQXVDLEVBQXZDO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0wsT0FBTyxDQUFDTyxLQUFSLENBQWMsVUFBZCxDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDLEVBQTFDO0FBQ0gsR0FIQyxDQUFGO0FBS0EsTUFBTUMsVUFBVSxHQUFHVCxPQUFPLENBQUNVLElBQVIsQ0FBYSxtQkFBYixFQUFrQ0MsS0FBbEMsRUFBbkI7QUFDQSxNQUFNQyxTQUFTLEdBQUdaLE9BQU8sQ0FBQ1UsSUFBUixDQUFhLG1CQUFiLEVBQWtDRyxJQUFsQyxFQUFsQjtBQUVBWixFQUFBQSxFQUFFLENBQUMsMkRBQUQsRUFBOEQsWUFBTTtBQUVsRVEsSUFBQUEsVUFBVSxDQUFDSyxLQUFYLEdBQW1CQyxZQUFuQixDQUFnQyxnQkFBaEM7QUFFQUgsSUFBQUEsU0FBUyxDQUFDRSxLQUFWLEdBQWtCQyxZQUFsQixDQUErQixVQUEvQjtBQUVBVixJQUFBQSxNQUFNLENBQUNMLE9BQU8sQ0FBQ08sS0FBUixDQUFjLE9BQWQsQ0FBRCxDQUFOLENBQStCQyxPQUEvQixDQUF1QyxnQkFBdkM7QUFDQUgsSUFBQUEsTUFBTSxDQUFDTCxPQUFPLENBQUNPLEtBQVIsQ0FBYyxVQUFkLENBQUQsQ0FBTixDQUFrQ0MsT0FBbEMsQ0FBMEMsVUFBMUM7QUFDSCxHQVJDLENBQUY7QUFVQVAsRUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLFlBQU07QUFDbkNJLElBQUFBLE1BQU0sQ0FBQ0ksVUFBVSxDQUFDTyxTQUFYLENBQXFCLFVBQUNDLElBQUQ7QUFBQSxhQUFVQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWLE1BQXVCLE9BQWpDO0FBQUEsS0FBckIsQ0FBRCxDQUFOLENBQXVFQyxPQUF2RTtBQUNBZCxJQUFBQSxNQUFNLENBQUNJLFVBQVUsQ0FBQ08sU0FBWCxDQUFxQixVQUFDQyxJQUFEO0FBQUEsYUFBVUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsWUFBVixNQUE0QixLQUF0QztBQUFBLEtBQXJCLENBQUQsQ0FBTixDQUEwRUMsT0FBMUU7QUFDSCxHQUhDLENBQUY7QUFLQWxCLEVBQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRCxZQUFNO0FBRXpELFFBQU1tQixRQUFRLEdBQUdwQixPQUFPLENBQUNvQixRQUFSLEVBQWpCO0FBQ0FmLElBQUFBLE1BQU0sQ0FBQ2UsUUFBUSxDQUFDQyxZQUFULEVBQUQsQ0FBTixDQUFnQ0MsSUFBaEMsQ0FBcUMsSUFBckM7QUFFQWIsSUFBQUEsVUFBVSxDQUFDSyxLQUFYLEdBQW1CQyxZQUFuQixDQUFnQyxlQUFoQztBQUNBVixJQUFBQSxNQUFNLENBQUNlLFFBQVEsQ0FBQ0MsWUFBVCxFQUFELENBQU4sQ0FBZ0NDLElBQWhDLENBQXFDLEtBQXJDO0FBRUFiLElBQUFBLFVBQVUsQ0FBQ0ssS0FBWCxHQUFtQkMsWUFBbkIsQ0FBZ0MsZ0JBQWhDO0FBQ0FWLElBQUFBLE1BQU0sQ0FBQ2UsUUFBUSxDQUFDQyxZQUFULEVBQUQsQ0FBTixDQUFnQ0MsSUFBaEMsQ0FBcUMsSUFBckM7QUFFSCxHQVhDLENBQUY7QUFhQXJCLEVBQUFBLEVBQUUsQ0FBQyxxREFBRCxFQUF3RCxZQUFNO0FBRTVELFFBQU1tQixRQUFRLEdBQUdwQixPQUFPLENBQUNvQixRQUFSLEVBQWpCO0FBRUFSLElBQUFBLFNBQVMsQ0FBQ0UsS0FBVixHQUFrQkMsWUFBbEIsQ0FBK0IsRUFBL0I7QUFDQVYsSUFBQUEsTUFBTSxDQUFDZSxRQUFRLENBQUNDLFlBQVQsRUFBRCxDQUFOLENBQWdDQyxJQUFoQyxDQUFxQyxLQUFyQztBQUVBVixJQUFBQSxTQUFTLENBQUNFLEtBQVYsR0FBa0JDLFlBQWxCLENBQStCLFVBQS9CO0FBQ0FWLElBQUFBLE1BQU0sQ0FBQ2UsUUFBUSxDQUFDQyxZQUFULEVBQUQsQ0FBTixDQUFnQ0MsSUFBaEMsQ0FBcUMsSUFBckM7QUFDSCxHQVRDLENBQUY7QUFXQXJCLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFNO0FBS3RDLFFBQU1zQixZQUFZLEdBQUd2QixPQUFPLENBQUNVLElBQVIsQ0FBYSxRQUFiLENBQXJCO0FBS0FhLElBQUFBLFlBQVksQ0FBQ0MsUUFBYixDQUFzQixPQUF0QjtBQUNILEdBWEMsQ0FBRjtBQVlILENBaEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgU2lnbkluIGZyb20gXCIuLi8uLi9zcmMvQ29tcG9uZW50L0xvZ2luL1NpZ25JblwiO1xuXG5cbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPFNpZ25JbiAvPilcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKiogU2lnbkluIENvbXBvbmVudCBUZXN0aW5nICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaXQoJ1NpZ25JbiBQYWdlIHJlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcmVyLmNyZWF0ZSg8U2lnbkluIC8+KTtcbn0pO1xuXG5kZXNjcmliZSgnPFNpZ25Jbi8+JywgKCkgPT4ge1xuICAgIGl0KCdTaWduSW4gUGFnZSByZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNoYWxsb3coPFNpZ25JbiAvPikpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NoZWNraW5nIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdlbWFpbCcpKS50b0VxdWFsKCcnKTtcbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuc3RhdGUoJ3Bhc3N3b3JkJykpLnRvRXF1YWwoJycpO1xuICAgIH0pXG5cbiAgICBjb25zdCBlbWFpbElucHV0ID0gd3JhcHBlci5maW5kKCdPdXRsaW5lZFRleHRGaWVsZCcpLmZpcnN0KCk7XG4gICAgY29uc3QgcGFzc0lucHV0ID0gd3JhcHBlci5maW5kKCdPdXRsaW5lZFRleHRGaWVsZCcpLmxhc3QoKTtcblxuICAgIGl0KCd0ZXN0aW5nIHN0YXRlIG9mIGNvbXBvbmVudCBhZnRlciBvbkNoYW5nZVRleHQgZXZlbnQgb2NjdXInLCAoKSA9PiB7XG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keUBnbWFpbC5jb20nKTtcblxuICAgICAgICBwYXNzSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ0FiY0AxMjM0Jyk7XG5cbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuc3RhdGUoJ2VtYWlsJykpLnRvRXF1YWwoJ2FuZHlAZ21haWwuY29tJyk7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdwYXNzd29yZCcpKS50b0VxdWFsKCdBYmNAMTIzNCcpO1xuICAgIH0pXG5cbiAgICBpdCgncHJvcHMgb2YgT3V0bGluZWRUZXh0RmllbGQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChlbWFpbElucHV0LmZpbmRXaGVyZSgobm9kZSkgPT4gbm9kZS5wcm9wKCdsYWJlbCcpID09PSAnRW1haWwnKSkudG9FeGlzdCgpO1xuICAgICAgICBleHBlY3QoZW1haWxJbnB1dC5maW5kV2hlcmUoKG5vZGUpID0+IG5vZGUucHJvcCgnZXJyb3JDb2xvcicpID09PSAncmVkJykpLnRvRXhpc3QoKTtcbiAgICB9KTtcblxuICAgIGl0KCd0ZXN0aW5nIHZhbGlkYXRlRm9ybSBtYXRob2QgZm9yIGVtYWlsIHZhbGlkYXRpb24nLCAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB3cmFwcGVyLmluc3RhbmNlKClcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnZhbGlkYXRlRm9ybSgpKS50b0JlKHRydWUpXG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keWdtYWlsLmNvbScpO1xuICAgICAgICBleHBlY3QoaW5zdGFuY2UudmFsaWRhdGVGb3JtKCkpLnRvQmUoZmFsc2UpXG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keUBnbWFpbC5jb20nKTtcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnZhbGlkYXRlRm9ybSgpKS50b0JlKHRydWUpXG5cbiAgICB9KVxuXG4gICAgaXQoJ3Rlc3RpbmcgdmFsaWRhdGVGb3JtIG1hdGhvZCBmb3IgcGFzc3dvcmQgdmFsaWRhdGlvbicsICgpID0+IHtcblxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHdyYXBwZXIuaW5zdGFuY2UoKVxuXG4gICAgICAgIHBhc3NJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnJyk7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZShmYWxzZSlcblxuICAgICAgICBwYXNzSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ0FiY0AxMjM0Jyk7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZSh0cnVlKVxuICAgIH0pXG5cbiAgICBpdCgndGVzdGluZyBjcmVhdGUgQWNjb3VudCBCdXR0b24nLCAoKSA9PiB7XG4gICAgICAgIC8vIHdyYXBwZXIuZmluZCgnQnV0dG9uJykuZmlyc3QoKS5pbnZva2UoJ29uUHJlc3MnKSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyAgICAgLy9leHBlY3Qod3JhcHBlci5wcm9wcygpKVxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cod3JhcHBlci5wcm9wcygpKVxuICAgICAgICAvLyB9KTtcbiAgICAgICAgY29uc3QgY3JlYXRlQnV0dG9uID0gd3JhcHBlci5maW5kKCdCdXR0b24nKVxuICAgICAgICAvLyAuZmluZFdoZXJlKCh0aXRsZSkgPT4gdGl0bGUucHJvcCgndGl0bGUnKSA9PT0gJ0NyZWF0ZSBBY2NvdW50JyApO1xuICAgICAgICAvLyBjcmVhdGVCdXR0b24uaW52b2tlKCdvblByZXNzJykoKS50aGVuKCgpPT57XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyh3cmFwcGVyLnByb3BzKCkpXG4gICAgICAgIC8vIH0pXG4gICAgICAgIGNyZWF0ZUJ1dHRvbi5zaW11bGF0ZSgnY2xpY2snKVxuICAgIH0pXG59KTtcbiJdfQ==