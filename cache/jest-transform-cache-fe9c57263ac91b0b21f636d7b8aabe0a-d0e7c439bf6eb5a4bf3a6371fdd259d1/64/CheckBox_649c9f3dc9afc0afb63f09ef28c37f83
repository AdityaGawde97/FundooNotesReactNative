9818537bc093fd59dd6c4d5bb3de67fa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckBox = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _Text = _interopRequireDefault(require("../text/Text"));

var _CheckBoxIcon = _interopRequireDefault(require("./CheckBoxIcon"));

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var CheckBox = function CheckBox(props) {
  var theme = props.theme,
      rest = (0, _objectWithoutProperties2.default)(props, ["theme"]);
  var Component = rest.Component,
      checked = rest.checked,
      iconRight = rest.iconRight,
      title = rest.title,
      titleProps = rest.titleProps,
      center = rest.center,
      right = rest.right,
      containerStyle = rest.containerStyle,
      textStyle = rest.textStyle,
      wrapperStyle = rest.wrapperStyle,
      onPress = rest.onPress,
      onLongPress = rest.onLongPress,
      checkedTitle = rest.checkedTitle,
      fontFamily = rest.fontFamily,
      _rest$checkedColor = rest.checkedColor,
      checkedColor = _rest$checkedColor === void 0 ? theme.colors.primary : _rest$checkedColor,
      attributes = (0, _objectWithoutProperties2.default)(rest, ["Component", "checked", "iconRight", "title", "titleProps", "center", "right", "containerStyle", "textStyle", "wrapperStyle", "onPress", "onLongPress", "checkedTitle", "fontFamily", "checkedColor"]);
  return _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    testID: "checkbox",
    onLongPress: onLongPress,
    onPress: onPress,
    style: _reactNative.StyleSheet.flatten([styles.container, title && styles.containerHasTitle, containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, right && {
      justifyContent: 'flex-end'
    }, center && {
      justifyContent: 'center'
    }, wrapperStyle && wrapperStyle])
  }, !iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  })), _react.default.isValidElement(title) ? title : title && _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "checkboxTitle",
    style: _reactNative.StyleSheet.flatten([styles.text(theme), textStyle && textStyle, fontFamily && {
      fontFamily: fontFamily
    }])
  }, titleProps), checked ? checkedTitle || title : title), iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  }))));
};

exports.CheckBox = CheckBox;
CheckBox.propTypes = _objectSpread({}, _CheckBoxIcon.default.propTypes, {
  Component: _propTypes.default.elementType,
  iconRight: _propTypes.default.bool,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  titleProps: _propTypes.default.object,
  center: _propTypes.default.bool,
  right: _propTypes.default.bool,
  containerStyle: _config.ViewPropTypes.style,
  wrapperStyle: _config.ViewPropTypes.style,
  textStyle: _reactNative.Text.propTypes.style,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  checkedTitle: _propTypes.default.string,
  fontFamily: _propTypes.default.string
});
CheckBox.defaultProps = {
  checked: false,
  iconRight: false,
  right: false,
  center: false,
  uncheckedColor: '#bfbfbf',
  checkedIcon: 'check-square-o',
  uncheckedIcon: 'square-o',
  size: 24,
  Component: _reactNative.TouchableOpacity,
  titleProps: {}
};
var styles = {
  wrapper: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  container: {
    margin: 5,
    marginLeft: 10,
    marginRight: 10,
    padding: 10
  },
  containerHasTitle: {
    borderWidth: 1,
    borderRadius: 3,
    backgroundColor: '#fafafa',
    borderColor: '#ededed'
  },
  text: function text(theme) {
    return _objectSpread({
      marginLeft: 10,
      marginRight: 10,
      color: theme.colors.grey1
    }, _reactNative.Platform.select({
      android: _objectSpread({}, _config.fonts.android.bold),
      default: {
        fontWeight: 'bold'
      }
    }));
  }
};

var _default = (0, _config.withTheme)(CheckBox, 'CheckBox');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,