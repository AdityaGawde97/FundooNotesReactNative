{"version":3,"sources":["Tooltip.js"],"names":["Tooltip","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","isIOS","wrapWithPress","toggleOnPress","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","ScreenWidth","ScreenHeight","x","y","position","left","top","display","alignItems","justifyContent","flex","borderRadius","padding","renderPointer","tooltipY","pointerColor","pastMiddleLine","borderBottomColor","renderContent","withTooltip","popover","highlightColor","tooltipStyle","overflow","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","setTimeout","withOverlay","overlayColor","onOpen","e","styles","container","React","PureComponent","propTypes","PropTypes","element","bool","number","oneOfType","string","ViewPropTypes","style","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;;;;;IAIMA,O;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,OAAO,EAAE,CAHH;AAINC,MAAAA,YAAY,EAAE,CAJR;AAKNC,MAAAA,aAAa,EAAE;AALT,K;;UAURC,a,GAAgB,YAAM;AAAA,UACZC,OADY,GACA,MAAKC,KADL,CACZD,OADY;;AAEpB,YAAKE,kBAAL;;AACA,YAAKC,QAAL,CAAc,UAAAC,SAAS,EAAI;AACzB,YAAIA,SAAS,CAACV,SAAV,IAAuB,CAACW,cAA5B,EAAmC;AACjCL,UAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;;AAED,eAAO;AAAEN,UAAAA,SAAS,EAAE,CAACU,SAAS,CAACV;AAAxB,SAAP;AACD,OAND;AAOD,K;;UAEDY,a,GAAgB,UAACC,aAAD,EAAgBC,QAAhB,EAA6B;AAC3C,UAAID,aAAJ,EAAmB;AACjB,eACE,6BAAC,6BAAD;AAAkB,UAAA,OAAO,EAAE,MAAKR,aAAhC;AAA+C,UAAA,aAAa,EAAE;AAA9D,WACGS,QADH,CADF;AAKD;;AAED,aAAOA,QAAP;AACD,K;;UAEDC,e,GAAkB,YAAM;AAAA,wBACoC,MAAKhB,KADzC;AAAA,UACdE,OADc,eACdA,OADc;AAAA,UACLC,OADK,eACLA,OADK;AAAA,UACIE,aADJ,eACIA,aADJ;AAAA,UACmBD,YADnB,eACmBA,YADnB;AAAA,wBAQlB,MAAKI,KARa;AAAA,UAGpBS,MAHoB,eAGpBA,MAHoB;AAAA,UAIpBC,eAJoB,eAIpBA,eAJoB;AAAA,UAKpBC,KALoB,eAKpBA,KALoB;AAAA,UAMpBC,WANoB,eAMpBA,WANoB;AAAA,UAOpBC,cAPoB,eAOpBA,cAPoB;;AAAA,kCAUL,oCACflB,OADe,EAEfD,OAFe,EAGfE,YAHe,EAIfC,aAJe,EAKfiB,oBALe,EAMfC,qBANe,EAOfJ,KAPe,EAQfF,MARe,EASfG,WATe,CAVK;AAAA,UAUdI,CAVc,yBAUdA,CAVc;AAAA,UAUXC,CAVW,yBAUXA,CAVW;;AAsBtB;AACEC,QAAAA,QAAQ,EAAE,UADZ;AAEEC,QAAAA,IAAI,EAAEH,CAFR;AAGEI,QAAAA,GAAG,EAAEH,CAHP;AAIEN,QAAAA,KAAK,EAALA,KAJF;AAKEF,QAAAA,MAAM,EAANA,MALF;AAMEC,QAAAA,eAAe,EAAfA,eANF;AAQEW,QAAAA,OAAO,EAAE,MARX;AASEC,QAAAA,UAAU,EAAE,QATd;AAUEC,QAAAA,cAAc,EAAE,QAVlB;AAWEC,QAAAA,IAAI,EAAE,CAXR;AAYEC,QAAAA,YAAY,EAAE,EAZhB;AAaEC,QAAAA,OAAO,EAAE;AAbX,SAcKb,cAdL;AAgBD,K;;UAEDc,a,GAAgB,UAAAC,QAAQ,EAAI;AAAA,yBACgC,MAAKpC,KADrC;AAAA,UAClBE,OADkB,gBAClBA,OADkB;AAAA,UACTC,OADS,gBACTA,OADS;AAAA,UACAE,aADA,gBACAA,aADA;AAAA,UACeD,YADf,gBACeA,YADf;AAAA,yBAEgB,MAAKI,KAFrB;AAAA,UAElBU,eAFkB,gBAElBA,eAFkB;AAAA,UAEDmB,YAFC,gBAEDA,YAFC;AAG1B,UAAMC,cAAc,GAAGpC,OAAO,GAAGkC,QAAjC;AAEA,aACE,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAE;AACLV,UAAAA,QAAQ,EAAE,UADL;AAELE,UAAAA,GAAG,EAAEU,cAAc,GAAGpC,OAAO,GAAG,EAAb,GAAkBA,OAAO,GAAGG,aAAV,GAA0B,CAF1D;AAGLsB,UAAAA,IAAI,EACFxB,OAAO,GACP,mDAAuBC,YAAvB,EAAqCD,OAArC,EAA8CmB,oBAA9C,IAA6D,CAD7D,GAEA;AANG;AADT,SAUE,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAE;AAAEiB,UAAAA,iBAAiB,EAAEF,YAAY,IAAInB;AAArC,SADT;AAEE,QAAA,MAAM,EAAEoB;AAFV,QAVF,CADF;AAiBD,K;;UAEDE,a,GAAgB,UAAAC,WAAW,EAAI;AAAA,yBACmC,MAAKjC,KADxC;AAAA,UACrBkC,OADqB,gBACrBA,OADqB;AAAA,UACZtB,WADY,gBACZA,WADY;AAAA,UACCN,aADD,gBACCA,aADD;AAAA,UACgB6B,cADhB,gBACgBA,cADhB;;AAG7B,UAAI,CAACF,WAAL,EAAkB;AAChB,eAAO,MAAK5B,aAAL,CAAmBC,aAAnB,EAAkC,MAAKN,KAAL,CAAWO,QAA7C,CAAP;AACD;;AAL4B,yBAO6B,MAAKf,KAPlC;AAAA,UAOrBE,OAPqB,gBAOrBA,OAPqB;AAAA,UAOZC,OAPY,gBAOZA,OAPY;AAAA,UAOHC,YAPG,gBAOHA,YAPG;AAAA,UAOWC,aAPX,gBAOWA,aAPX;;AAQ7B,UAAMuC,YAAY,GAAG,MAAK5B,eAAL,EAArB;;AACA,aACE,6BAAC,iBAAD,QACE,6BAAC,iBAAD;AACE,QAAA,KAAK,EAAE;AACLU,UAAAA,QAAQ,EAAE,UADL;AAELE,UAAAA,GAAG,EAAE1B,OAFA;AAGLyB,UAAAA,IAAI,EAAExB,OAHD;AAILe,UAAAA,eAAe,EAAEyB,cAJZ;AAKLE,UAAAA,QAAQ,EAAE,SALL;AAML1B,UAAAA,KAAK,EAAEf,YANF;AAOLa,UAAAA,MAAM,EAAEZ;AAPH;AADT,SAWG,MAAKG,KAAL,CAAWO,QAXd,CADF,EAcGK,WAAW,IAAI,MAAKe,aAAL,CAAmBS,YAAY,CAAChB,GAAhC,CAdlB,EAeE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEgB,YAAb;AAA2B,QAAA,MAAM,EAAC;AAAlC,SACGF,OADH,CAfF,CADF;AAqBD,K;;UAODjC,kB,GAAqB,YAAM;AACzB,YAAKqC,eAAL,IACE,MAAKA,eAAL,CAAqBC,OAArB,CACE,UACEC,YADF,EAEEC,YAFF,EAGE9B,KAHF,EAIEF,MAJF,EAKEiC,WALF,EAMEC,WANF,EAOK;AACH,cAAKzC,QAAL,CAAc;AACZP,UAAAA,OAAO,EAAE+C,WADG;AAEZhD,UAAAA,OAAO,EAAEU,iBACLuC,WADK,GAELA,WAAW,GAAGC,uBAAUC,aAJhB;AAKZjD,UAAAA,YAAY,EAAEe,KALF;AAMZd,UAAAA,aAAa,EAAEY;AANH,SAAd;AAQD,OAjBH,CADF;AAoBD,K;;;;;;;wCA1BmB;AAElBqC,MAAAA,UAAU,CAAC,KAAK7C,kBAAN,EAA0B,GAA1B,CAAV;AACD;;;6BAyBQ;AAAA;;AAAA,UACCR,SADD,GACe,KAAKD,KADpB,CACCC,SADD;AAAA,yBAEgD,KAAKO,KAFrD;AAAA,UAECD,OAFD,gBAECA,OAFD;AAAA,UAEUgD,WAFV,gBAEUA,WAFV;AAAA,UAEuBC,YAFvB,gBAEuBA,YAFvB;AAAA,UAEqCC,MAFrC,gBAEqCA,MAFrC;AAIP,aACE,6BAAC,iBAAD;AACE,QAAA,WAAW,EAAE,KADf;AAEE,QAAA,GAAG,EAAE,aAAAC,CAAC,EAAI;AACR,UAAA,MAAI,CAACZ,eAAL,GAAuBY,CAAvB;AACD;AAJH,SAMG,KAAKlB,aAAL,CAAmB,KAAnB,CANH,EAOE,6BAAC,kBAAD;AACE,QAAA,aAAa,EAAC,MADhB;AAEE,QAAA,OAAO,EAAEvC,SAFX;AAGE,QAAA,WAAW,MAHb;AAIE,QAAA,SAAS,EAAEM,OAJb;AAKE,QAAA,MAAM,EAAEkD,MALV;AAME,QAAA,cAAc,EAAElD;AANlB,SAQE,6BAAC,6BAAD;AACE,QAAA,KAAK,EAAEoD,MAAM,CAACC,SAAP,CAAiBL,WAAjB,EAA8BC,YAA9B,CADT;AAEE,QAAA,OAAO,EAAE,KAAKlD,aAFhB;AAGE,QAAA,aAAa,EAAE;AAHjB,SAKG,KAAKkC,aAAL,CAAmB,IAAnB,CALH,CARF,CAPF,CADF;AA0BD;;;EA7LmBqB,eAAMC,a;;;AAgM5B/D,OAAO,CAACgE,SAAR,GAAoB;AAClBhD,EAAAA,QAAQ,EAAEiD,mBAAUC,OADF;AAElB7C,EAAAA,WAAW,EAAE4C,mBAAUE,IAFL;AAGlBxB,EAAAA,OAAO,EAAEsB,mBAAUC,OAHD;AAIlBnD,EAAAA,aAAa,EAAEkD,mBAAUE,IAJP;AAKlBjD,EAAAA,MAAM,EAAE+C,mBAAUG,MALA;AAMlBhD,EAAAA,KAAK,EAAE6C,mBAAUI,SAAV,CAAoB,CAACJ,mBAAUG,MAAX,EAAmBH,mBAAUK,MAA7B,CAApB,CANW;AAOlBhD,EAAAA,cAAc,EAAEiD,sBAAcC,KAPZ;AAQlBlC,EAAAA,YAAY,EAAE2B,mBAAUK,MARN;AASlB9D,EAAAA,OAAO,EAAEyD,mBAAUQ,IATD;AAUlBf,EAAAA,MAAM,EAAEO,mBAAUQ,IAVA;AAWlBhB,EAAAA,YAAY,EAAEQ,mBAAUK,MAXN;AAYlBd,EAAAA,WAAW,EAAES,mBAAUE,IAZL;AAalBhD,EAAAA,eAAe,EAAE8C,mBAAUK,MAbT;AAclB1B,EAAAA,cAAc,EAAEqB,mBAAUK;AAdR,CAApB;AAiBAtE,OAAO,CAAC0E,YAAR,GAAuB;AACrBlB,EAAAA,WAAW,EAAE,IADQ;AAErBC,EAAAA,YAAY,EAAE,2BAFO;AAGrBb,EAAAA,cAAc,EAAE,aAHK;AAIrBvB,EAAAA,WAAW,EAAE,IAJQ;AAKrBN,EAAAA,aAAa,EAAE,IALM;AAMrBG,EAAAA,MAAM,EAAE,EANa;AAOrBE,EAAAA,KAAK,EAAE,GAPc;AAQrBE,EAAAA,cAAc,EAAE,EARK;AASrBH,EAAAA,eAAe,EAAE,SATI;AAUrBX,EAAAA,OAAO,EAAE,mBAAM,CAAE,CAVI;AAWrBkD,EAAAA,MAAM,EAAE,kBAAM,CAAE;AAXK,CAAvB;AAcA,IAAME,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE,mBAACL,WAAD,EAAcC,YAAd;AAAA,WAAgC;AACzCtC,MAAAA,eAAe,EAAEqC,WAAW,GAAGC,YAAH,GAAkB,aADL;AAEzCxB,MAAAA,IAAI,EAAE;AAFmC,KAAhC;AAAA;AADE,CAAf;;eAQe,uBAAUjC,OAAV,EAAmB,SAAnB,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Modal, View, StatusBar } from 'react-native';\n\nimport { ViewPropTypes, withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\n\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, {\n  getElementVisibleWidth,\n} from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement;\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState(prevState => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithPress = (toggleOnPress, children) => {\n    if (toggleOnPress) {\n      return (\n        <TouchableOpacity onPress={this.toggleTooltip} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const {\n      height,\n      backgroundColor,\n      width,\n      withPointer,\n      containerStyle,\n    } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height,\n      backgroundColor,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      padding: 10,\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = tooltipY => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerColor } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n\n    return (\n      <View\n        style={{\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left:\n            xOffset +\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n            7.5,\n        }}\n      >\n        <Triangle\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n\n  renderContent = withTooltip => {\n    const { popover, withPointer, toggleOnPress, highlightColor } = this.props;\n\n    if (!withTooltip) {\n      return this.wrapWithPress(toggleOnPress, this.props.children);\n    }\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    return (\n      <View>\n        <View\n          style={{\n            position: 'absolute',\n            top: yOffset,\n            left: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n          }}\n        >\n          {this.props.children}\n        </View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  getElementPosition = () => {\n    this.renderedElement &&\n      this.renderedElement.measure(\n        (\n          frameOffsetX,\n          frameOffsetY,\n          width,\n          height,\n          pageOffsetX,\n          pageOffsetY\n        ) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset: isIOS\n              ? pageOffsetY\n              : pageOffsetY - StatusBar.currentHeight,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const { onClose, withOverlay, overlayColor, onOpen } = this.props;\n\n    return (\n      <View\n        collapsable={false}\n        ref={e => {\n          this.renderedElement = e;\n        }}\n      >\n        {this.renderContent(false)}\n        <Modal\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          <TouchableOpacity\n            style={styles.container(withOverlay, overlayColor)}\n            onPress={this.toggleTooltip}\n            activeOpacity={1}\n          >\n            {this.renderContent(true)}\n          </TouchableOpacity>\n        </Modal>\n      </View>\n    );\n  }\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: ViewPropTypes.style,\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n};\n\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n};\n\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1,\n  }),\n};\n\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]}