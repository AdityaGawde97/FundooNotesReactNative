{"version":3,"sources":["index.js"],"names":["lineTypes","PropTypes","oneOf","Line","state","maxLineWidth","props","disabled","restricted","lineWidth","activeLineWidth","disabledLineWidth","baseColor","tintColor","errorColor","focusAnimation","borderColor","borderWidth","interpolate","inputRange","outputRange","lineType","disabledLineType","borderStyle","Array","from","top","right","left","lineStyle","borderProps","styles","container","line","Math","max","PureComponent","defaultProps","propTypes","bool","string","number","instanceOf","Animated","Value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEA,IAAMA,SAAS,GAAGC,mBACfC,KADe,CACT,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,MAA9B,CADS,CAAlB;;IAGqBC,I;;;;;;;;;;;;;;;UA4CnBC,K,GAAQ;AAAEC,MAAAA,YAAY,EAAE;AAAhB,K;;;;;;kCAEM;AAAA,wBAWR,KAAKC,KAXG;AAAA,UAEVC,QAFU,eAEVA,QAFU;AAAA,UAGVC,UAHU,eAGVA,UAHU;AAAA,UAIVC,SAJU,eAIVA,SAJU;AAAA,UAKVC,eALU,eAKVA,eALU;AAAA,UAMVC,iBANU,eAMVA,iBANU;AAAA,UAOVC,SAPU,eAOVA,SAPU;AAAA,UAQVC,SARU,eAQVA,SARU;AAAA,UASVC,UATU,eASVA,UATU;AAAA,UAUVC,cAVU,eAUVA,cAVU;;AAaZ,UAAIR,QAAJ,EAAc;AACZ,eAAO;AACLS,UAAAA,WAAW,EAAEJ,SADR;AAELK,UAAAA,WAAW,EAAEN;AAFR,SAAP;AAID;;AAED,UAAIH,UAAJ,EAAgB;AACd,eAAO;AACLQ,UAAAA,WAAW,EAAEF,UADR;AAELG,UAAAA,WAAW,EAAEP;AAFR,SAAP;AAID;;AAED,aAAO;AACLM,QAAAA,WAAW,EAAED,cAAc,CAACG,WAAf,CAA2B;AACtCC,UAAAA,UAAU,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAD0B;AAEtCC,UAAAA,WAAW,EAAE,CAACN,UAAD,EAAaF,SAAb,EAAwBC,SAAxB;AAFyB,SAA3B,CADR;AAMLI,QAAAA,WAAW,EAAEF,cAAc,CAACG,WAAf,CAA2B;AACtCC,UAAAA,UAAU,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAD0B;AAEtCC,UAAAA,WAAW,EAAE,CAACV,eAAD,EAAkBD,SAAlB,EAA6BC,eAA7B;AAFyB,SAA3B;AANR,OAAP;AAWD;;;6BAEQ;AAAA,UACDL,YADC,GACgB,KAAKD,KADrB,CACDC,YADC;AAAA,yBAEwC,KAAKC,KAF7C;AAAA,UAEDC,QAFC,gBAEDA,QAFC;AAAA,UAESc,QAFT,gBAESA,QAFT;AAAA,UAEmBC,gBAFnB,gBAEmBA,gBAFnB;AAIP,UAAIC,WAAW,GAAGhB,QAAQ,GACxBe,gBADwB,GAExBD,QAFF;;AAIA,UAAI,WAAWE,WAAf,EAA4B;AAC1B,eAAO,IAAP;AACD;;AAVM,wBAYkBC,KAAK,CAC3BC,IADsB,CACjB,IAAID,KAAJ,CAAU,CAAV,CADiB,EACH;AAAA,eAAM,CAAC,GAAD,GAAOnB,YAAb;AAAA,OADG,CAZlB;AAAA;AAAA,UAYFqB,GAZE;AAAA,UAYGC,KAZH;AAAA,UAYUC,IAZV;;AAeP,UAAIC,SAAS,qBACR,KAAKC,WAAL,EADQ;AAGXP,QAAAA,WAAW,EAAXA,WAHW;AAIXG,QAAAA,GAAG,EAAHA,GAJW;AAKXC,QAAAA,KAAK,EAALA,KALW;AAMXC,QAAAA,IAAI,EAAJA;AANW,QAAb;;AASA,aACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEG,gBAAOC,SAApB;AAA+B,QAAA,aAAa,EAAC;AAA7C,SACE,6BAAC,qBAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAACD,gBAAOE,IAAR,EAAcJ,SAAd;AAAtB,QADF,CADF;AAKD;;;6CAxF+BvB,K,EAAOF,K,EAAO;AAAA,UACtCK,SADsC,GACYH,KADZ,CACtCG,SADsC;AAAA,UAC3BC,eAD2B,GACYJ,KADZ,CAC3BI,eAD2B;AAAA,UACVC,iBADU,GACYL,KADZ,CACVK,iBADU;AAG5C,UAAIN,YAAY,GAAG6B,IAAI,CAACC,GAAL,CACjB1B,SADiB,EAEjBC,eAFiB,EAGjBC,iBAHiB,EAIjB,CAJiB,CAAnB;;AAOA,UAAIN,YAAY,KAAKD,KAAK,CAACC,YAA3B,EAAyC;AACvC,eAAO;AAAEA,UAAAA,YAAY,EAAZA;AAAF,SAAP;AACD;;AAED,aAAO,IAAP;AACD;;;EA1C+B+B,oB;;;AAAbjC,I,CACZkC,Y,GAAe;AACpBhB,EAAAA,QAAQ,EAAE,OADU;AAEpBC,EAAAA,gBAAgB,EAAE,QAFE;AAIpBf,EAAAA,QAAQ,EAAE,KAJU;AAKpBC,EAAAA,UAAU,EAAE;AALQ,C;AADHL,I,CASZmC,S,GAAY;AACjBjB,EAAAA,QAAQ,EAAErB,SADO;AAEjBsB,EAAAA,gBAAgB,EAAEtB,SAFD;AAIjBO,EAAAA,QAAQ,EAAEN,mBAAUsC,IAJH;AAKjB/B,EAAAA,UAAU,EAAEP,mBAAUsC,IALL;AAOjB1B,EAAAA,SAAS,EAAEZ,mBAAUuC,MAPJ;AAQjB5B,EAAAA,SAAS,EAAEX,mBAAUuC,MARJ;AASjB1B,EAAAA,UAAU,EAAEb,mBAAUuC,MATL;AAWjB/B,EAAAA,SAAS,EAAER,mBAAUwC,MAXJ;AAYjB/B,EAAAA,eAAe,EAAET,mBAAUwC,MAZV;AAajB9B,EAAAA,iBAAiB,EAAEV,mBAAUwC,MAbZ;AAejB1B,EAAAA,cAAc,EAAEd,mBAAUyC,UAAV,CAAqBC,sBAASC,KAA9B;AAfC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { View, Animated } from 'react-native';\n\nimport styles from './styles';\n\nconst lineTypes = PropTypes\n  .oneOf(['solid', 'dotted', 'dashed', 'none']);\n\nexport default class Line extends PureComponent {\n  static defaultProps = {\n    lineType: 'solid',\n    disabledLineType: 'dotted',\n\n    disabled: false,\n    restricted: false,\n  };\n\n  static propTypes = {\n    lineType: lineTypes,\n    disabledLineType: lineTypes,\n\n    disabled: PropTypes.bool,\n    restricted: PropTypes.bool,\n\n    tintColor: PropTypes.string,\n    baseColor: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n    disabledLineWidth: PropTypes.number,\n\n    focusAnimation: PropTypes.instanceOf(Animated.Value),\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    let { lineWidth, activeLineWidth, disabledLineWidth } = props;\n\n    let maxLineWidth = Math.max(\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      1,\n    );\n\n    if (maxLineWidth !== state.maxLineWidth) {\n      return { maxLineWidth };\n    }\n\n    return null;\n  }\n\n  state = { maxLineWidth: 1 };\n\n  borderProps() {\n    let {\n      disabled,\n      restricted,\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      baseColor,\n      tintColor,\n      errorColor,\n      focusAnimation,\n    } = this.props;\n\n    if (disabled) {\n      return {\n        borderColor: baseColor,\n        borderWidth: disabledLineWidth,\n      };\n    }\n\n    if (restricted) {\n      return {\n        borderColor: errorColor,\n        borderWidth: activeLineWidth,\n      };\n    }\n\n    return {\n      borderColor: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      }),\n\n      borderWidth: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      }),\n    };\n  }\n\n  render() {\n    let { maxLineWidth } = this.state;\n    let { disabled, lineType, disabledLineType } = this.props;\n\n    let borderStyle = disabled?\n      disabledLineType:\n      lineType;\n\n    if ('none' === borderStyle) {\n      return null;\n    }\n\n    let [top, right, left] = Array\n      .from(new Array(3), () => -1.5 * maxLineWidth);\n\n    let lineStyle = {\n      ...this.borderProps(),\n\n      borderStyle,\n      top,\n      right,\n      left,\n    };\n\n    return (\n      <View style={styles.container} pointerEvents='none'>\n        <Animated.View style={[styles.line, lineStyle]} />\n      </View>\n    );\n  }\n}\n"]}