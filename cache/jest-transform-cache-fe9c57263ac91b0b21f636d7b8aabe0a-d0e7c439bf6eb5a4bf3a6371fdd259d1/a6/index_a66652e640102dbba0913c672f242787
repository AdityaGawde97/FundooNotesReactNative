5c07d499b5053f13a128a4946e2d2ee2
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

var Label = function (_PureComponent) {
  (0, _inherits2.default)(Label, _PureComponent);

  function Label() {
    (0, _classCallCheck2.default)(this, Label);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Label).apply(this, arguments));
  }

  (0, _createClass2.default)(Label, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          offset = _this$props.offset,
          disabled = _this$props.disabled,
          restricted = _this$props.restricted,
          fontSize = _this$props.fontSize,
          activeFontSize = _this$props.activeFontSize,
          contentInset = _this$props.contentInset,
          errorColor = _this$props.errorColor,
          baseColor = _this$props.baseColor,
          tintColor = _this$props.tintColor,
          style = _this$props.style,
          focusAnimation = _this$props.focusAnimation,
          labelAnimation = _this$props.labelAnimation,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["label", "offset", "disabled", "restricted", "fontSize", "activeFontSize", "contentInset", "errorColor", "baseColor", "tintColor", "style", "focusAnimation", "labelAnimation"]);

      if (null == label) {
        return null;
      }

      var color = disabled ? baseColor : restricted ? errorColor : focusAnimation.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [errorColor, baseColor, tintColor]
      });
      var textStyle = {
        lineHeight: fontSize,
        fontSize: fontSize,
        color: color
      };
      var x0 = offset.x0,
          y0 = offset.y0,
          x1 = offset.x1,
          y1 = offset.y1;
      y0 += activeFontSize;
      y0 += contentInset.label;
      y0 += fontSize * 0.25;
      var containerStyle = {
        transform: [{
          scale: labelAnimation.interpolate({
            inputRange: [0, 1],
            outputRange: [1, activeFontSize / fontSize]
          })
        }, {
          translateY: labelAnimation.interpolate({
            inputRange: [0, 1],
            outputRange: [y0, y1]
          })
        }, {
          translateX: labelAnimation.interpolate({
            inputRange: [0, 1],
            outputRange: [x0, x1]
          })
        }]
      };
      return _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.container, containerStyle]
      }, _react.default.createElement(_reactNative.Animated.Text, (0, _extends2.default)({
        style: [_styles.default.text, style, textStyle]
      }, props), label));
    }
  }]);
  return Label;
}(_react.PureComponent);

exports.default = Label;
Label.defaultProps = {
  numberOfLines: 1,
  disabled: false,
  restricted: false
};
Label.propTypes = {
  numberOfLines: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  fontSize: _propTypes.default.number.isRequired,
  activeFontSize: _propTypes.default.number.isRequired,
  baseColor: _propTypes.default.string.isRequired,
  tintColor: _propTypes.default.string.isRequired,
  errorColor: _propTypes.default.string.isRequired,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  labelAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  contentInset: _propTypes.default.shape({
    label: _propTypes.default.number
  }),
  offset: _propTypes.default.shape({
    x0: _propTypes.default.number,
    y0: _propTypes.default.number,
    x1: _propTypes.default.number,
    y1: _propTypes.default.number
  }),
  style: _reactNative.Animated.Text.propTypes.style,
  label: _propTypes.default.string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,