c73aceb6dc776bdb99273103ea888b7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Icon = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _getIconType = _interopRequireDefault(require("../helpers/getIconType"));

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Icon = function Icon(props) {
  var type = props.type,
      name = props.name,
      size = props.size,
      color = props.color,
      iconStyle = props.iconStyle,
      underlayColor = props.underlayColor,
      reverse = props.reverse,
      raised = props.raised,
      containerStyle = props.containerStyle,
      reverseColor = props.reverseColor,
      disabled = props.disabled,
      disabledStyle = props.disabledStyle,
      onPress = props.onPress,
      _props$Component = props.Component,
      Component = _props$Component === void 0 ? onPress ? _reactNative.TouchableHighlight : _reactNative.View : _props$Component,
      attributes = (0, _objectWithoutProperties2.default)(props, ["type", "name", "size", "color", "iconStyle", "underlayColor", "reverse", "raised", "containerStyle", "reverseColor", "disabled", "disabledStyle", "onPress", "Component"]);
  var IconComponent = (0, _getIconType.default)(type);

  var getBackgroundColor = function getBackgroundColor() {
    if (reverse) {
      return color;
    }

    return raised ? 'white' : 'transparent';
  };

  return _react.default.createElement(_reactNative.View, {
    style: containerStyle && containerStyle
  }, _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    underlayColor: reverse ? color : underlayColor || color,
    style: _reactNative.StyleSheet.flatten([(reverse || raised) && styles.button, (reverse || raised) && {
      borderRadius: size + 4,
      height: size * 2 + 4,
      width: size * 2 + 4
    }, raised && styles.raised, {
      backgroundColor: getBackgroundColor(),
      alignItems: 'center',
      justifyContent: 'center'
    }, disabled && styles.disabled, disabled && disabledStyle])
  }, onPress && {
    disabled: disabled
  }, {
    onPress: onPress
  }), _react.default.createElement(IconComponent, {
    testID: "iconIcon",
    style: _reactNative.StyleSheet.flatten([{
      backgroundColor: 'transparent'
    }, iconStyle && iconStyle]),
    size: size,
    name: name,
    color: reverse ? reverseColor : color
  })));
};

exports.Icon = Icon;
Icon.propTypes = {
  type: _propTypes.default.string,
  name: _propTypes.default.string,
  size: _propTypes.default.number,
  color: _propTypes.default.string,
  Component: _propTypes.default.elementType,
  underlayColor: _propTypes.default.string,
  reverse: _propTypes.default.bool,
  raised: _propTypes.default.bool,
  containerStyle: _config.ViewPropTypes.style,
  iconStyle: _reactNative.Text.propTypes.style,
  onPress: _propTypes.default.func,
  reverseColor: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  disabledStyle: _config.ViewPropTypes.style
};
Icon.defaultProps = {
  underlayColor: 'white',
  reverse: false,
  raised: false,
  size: 24,
  color: 'black',
  reverseColor: 'white',
  disabled: false,
  type: 'material'
};

var styles = _reactNative.StyleSheet.create({
  button: {
    margin: 7
  },
  raised: _objectSpread({}, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  disabled: {
    backgroundColor: '#D1D5D8'
  }
});

var _default = (0, _config.withTheme)(Icon, 'Icon');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,