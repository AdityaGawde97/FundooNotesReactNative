c7d6b290558a5f08f12df359529bc6b4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forHorizontalIOS = forHorizontalIOS;
exports.forVerticalIOS = forVerticalIOS;
exports.forModalPresentationIOS = forModalPresentationIOS;
exports.forFadeFromBottomAndroid = forFadeFromBottomAndroid;
exports.forRevealFromBottomAndroid = forRevealFromBottomAndroid;
exports.forScaleFromCenterAndroid = forScaleFromCenterAndroid;
exports.forNoAnimation = forNoAnimation;

var _reactNative = require("react-native");

var _conditional = _interopRequireDefault(require("../utils/conditional"));

var add = _reactNative.Animated.add,
    multiply = _reactNative.Animated.multiply;

function forHorizontalIOS(_ref) {
  var current = _ref.current,
      next = _ref.next,
      inverted = _ref.inverted,
      screen = _ref.layouts.screen;
  var translateFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.width, 0],
    extrapolate: 'clamp'
  }), inverted);
  var translateUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.width * -0.3],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.07],
    extrapolate: 'clamp'
  });
  var shadowOpacity = current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 0.3],
    extrapolate: 'clamp'
  });
  return {
    cardStyle: {
      transform: [{
        translateX: translateFocused
      }, {
        translateX: translateUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    },
    shadowStyle: {
      shadowOpacity: shadowOpacity
    }
  };
}

function forVerticalIOS(_ref2) {
  var current = _ref2.current,
      inverted = _ref2.inverted,
      screen = _ref2.layouts.screen;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  return {
    cardStyle: {
      transform: [{
        translateY: translateY
      }]
    }
  };
}

function forModalPresentationIOS(_ref3) {
  var index = _ref3.index,
      current = _ref3.current,
      next = _ref3.next,
      inverted = _ref3.inverted,
      screen = _ref3.layouts.screen,
      insets = _ref3.insets;
  var isLandscape = screen.width > screen.height;
  var topOffset = isLandscape ? 0 : 10;
  var statusBarHeight = insets.top;
  var aspectRatio = screen.height / screen.width;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var translateY = multiply(progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [screen.height, index === 0 ? 0 : topOffset, (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio]
  }), inverted);
  var overlayOpacity = progress.interpolate({
    inputRange: [0, 1, 1.0001, 2],
    outputRange: [0, 0.3, 1, 1]
  });
  var scale = isLandscape ? 1 : progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [1, 1, screen.width ? 1 - topOffset * 2 / screen.width : 1]
  });
  var borderRadius = isLandscape ? 0 : index === 0 ? progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0, 0, 10]
  }) : 10;
  return {
    cardStyle: {
      overflow: 'hidden',
      borderTopLeftRadius: borderRadius,
      borderTopRightRadius: borderRadius,
      marginTop: index === 0 ? 0 : statusBarHeight,
      transform: [{
        translateY: translateY
      }, {
        scale: scale
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}

function forFadeFromBottomAndroid(_ref4) {
  var current = _ref4.current,
      inverted = _ref4.inverted,
      screen = _ref4.layouts.screen,
      closing = _ref4.closing;
  var translateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * 0.08, 0],
    extrapolate: 'clamp'
  }), inverted);
  var opacity = (0, _conditional.default)(closing, current.progress, current.progress.interpolate({
    inputRange: [0, 0.5, 0.9, 1],
    outputRange: [0, 0.25, 0.7, 1]
  }));
  return {
    cardStyle: {
      opacity: opacity,
      transform: [{
        translateY: translateY
      }]
    }
  };
}

function forRevealFromBottomAndroid(_ref5) {
  var current = _ref5.current,
      next = _ref5.next,
      inverted = _ref5.inverted,
      screen = _ref5.layouts.screen;
  var containerTranslateY = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYFocused = multiply(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [screen.height * (95.9 / 100) * -1, 0],
    extrapolate: 'clamp'
  }), inverted);
  var cardTranslateYUnfocused = next ? multiply(next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, screen.height * (2 / 100) * -1],
    extrapolate: 'clamp'
  }), inverted) : 0;
  var overlayOpacity = current.progress.interpolate({
    inputRange: [0, 0.36, 1],
    outputRange: [0, 0.1, 0.1],
    extrapolate: 'clamp'
  });
  return {
    containerStyle: {
      overflow: 'hidden',
      transform: [{
        translateY: containerTranslateY
      }]
    },
    cardStyle: {
      transform: [{
        translateY: cardTranslateYFocused
      }, {
        translateY: cardTranslateYUnfocused
      }]
    },
    overlayStyle: {
      opacity: overlayOpacity
    }
  };
}

function forScaleFromCenterAndroid(_ref6) {
  var current = _ref6.current,
      next = _ref6.next,
      closing = _ref6.closing;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var opacity = progress.interpolate({
    inputRange: [0, 0.8, 1, 1.2, 2],
    outputRange: [0, 0.5, 1, 0.33, 0]
  });
  var scale = (0, _conditional.default)(closing, current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0.9, 1],
    extrapolate: 'clamp'
  }), progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0.85, 1, 1.1]
  }));
  return {
    containerStyle: {
      opacity: opacity,
      transform: [{
        scale: scale
      }]
    }
  };
}

function forNoAnimation() {
  return {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,