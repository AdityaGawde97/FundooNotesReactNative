9b111fdb6480b369ef8f4b93df78b7ed
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ListItem = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _helpers = require("../helpers");

var _config = require("../config");

var _Avatar = _interopRequireDefault(require("../avatar/Avatar"));

var _Badge = _interopRequireDefault(require("../badge/Badge"));

var _CheckBox = _interopRequireDefault(require("../checkbox/CheckBox"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var _Text = _interopRequireDefault(require("../text/Text"));

var _ButtonGroup = _interopRequireDefault(require("../buttons/ButtonGroup"));

var _Input = _interopRequireDefault(require("../input/Input"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ANDROID_SECONDARY = 'rgba(0, 0, 0, 0.54)';
var chevronDefaultProps = {
  type: _reactNative.Platform.OS === 'ios' ? 'ionicon' : 'material',
  color: '#D1D1D6',
  name: _reactNative.Platform.OS === 'ios' ? 'ios-arrow-forward' : 'keyboard-arrow-right',
  size: 16
};

var checkmarkDefaultProps = function checkmarkDefaultProps(theme) {
  return {
    name: 'check',
    size: 20,
    color: theme.colors.primary
  };
};

var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_Text.default, content, _objectSpread({}, defaultProps, {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};

var renderAvatar = function renderAvatar(content) {
  return (0, _helpers.renderNode)(_Avatar.default, content, {
    size: 40,
    rounded: true
  });
};

var renderIcon = function renderIcon(content) {
  return (0, _helpers.renderNode)(_Icon.default, content, {
    color: _reactNative.Platform.OS === 'ios' ? null : ANDROID_SECONDARY,
    size: 24
  });
};

var ListItem = function ListItem(props) {
  var title = props.title,
      titleStyle = props.titleStyle,
      titleProps = props.titleProps,
      subtitle = props.subtitle,
      subtitleStyle = props.subtitleStyle,
      subtitleProps = props.subtitleProps,
      containerStyle = props.containerStyle,
      onPress = props.onPress,
      onLongPress = props.onLongPress,
      _props$Component = props.Component,
      Component = _props$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View : _props$Component,
      leftIcon = props.leftIcon,
      leftAvatar = props.leftAvatar,
      leftElement = props.leftElement,
      rightIcon = props.rightIcon,
      rightAvatar = props.rightAvatar,
      rightElement = props.rightElement,
      rightTitle = props.rightTitle,
      rightTitleStyle = props.rightTitleStyle,
      rightTitleProps = props.rightTitleProps,
      rightSubtitle = props.rightSubtitle,
      rightSubtitleStyle = props.rightSubtitleStyle,
      rightSubtitleProps = props.rightSubtitleProps,
      input = props.input,
      buttonGroup = props.buttonGroup,
      switchProps = props.switch,
      checkBox = props.checkBox,
      badge = props.badge,
      chevron = props.chevron,
      contentContainerStyle = props.contentContainerStyle,
      rightContentContainerStyle = props.rightContentContainerStyle,
      checkmark = props.checkmark,
      disabled = props.disabled,
      disabledStyle = props.disabledStyle,
      bottomDivider = props.bottomDivider,
      topDivider = props.topDivider,
      pad = props.pad,
      linearGradientProps = props.linearGradientProps,
      _props$ViewComponent = props.ViewComponent,
      ViewComponent = _props$ViewComponent === void 0 ? linearGradientProps && global.Expo ? global.Expo.LinearGradient : _reactNative.View : _props$ViewComponent,
      theme = props.theme,
      attributes = (0, _objectWithoutProperties2.default)(props, ["title", "titleStyle", "titleProps", "subtitle", "subtitleStyle", "subtitleProps", "containerStyle", "onPress", "onLongPress", "Component", "leftIcon", "leftAvatar", "leftElement", "rightIcon", "rightAvatar", "rightElement", "rightTitle", "rightTitleStyle", "rightTitleProps", "rightSubtitle", "rightSubtitleStyle", "rightSubtitleProps", "input", "buttonGroup", "switch", "checkBox", "badge", "chevron", "contentContainerStyle", "rightContentContainerStyle", "checkmark", "disabled", "disabledStyle", "bottomDivider", "topDivider", "pad", "linearGradientProps", "ViewComponent", "theme"]);
  return _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    onPress: onPress,
    onLongPress: onLongPress,
    disabled: disabled
  }), _react.default.createElement(PadView, (0, _extends2.default)({
    Component: ViewComponent
  }, linearGradientProps, {
    style: _reactNative.StyleSheet.flatten([styles.container(theme), (buttonGroup || switchProps) && {
      paddingVertical: 8
    }, topDivider && {
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth
    }, bottomDivider && {
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
    }, containerStyle, disabled && disabledStyle]),
    pad: pad
  }), (0, _helpers.renderNode)(_Text.default, leftElement), renderIcon(leftIcon), renderAvatar(leftAvatar), (typeof title !== 'undefined' || subtitle) && _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.contentContainer, contentContainerStyle])
  }, renderText(title, _objectSpread({
    testID: 'listItemTitle'
  }, titleProps), _reactNative.StyleSheet.flatten([styles.title, titleStyle])), renderText(subtitle, subtitleProps, _reactNative.StyleSheet.flatten([styles.subtitle, subtitleStyle]))), (!!rightTitle || !!rightSubtitle) && _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.rightContentContainer, rightContentContainerStyle])
  }, renderText(rightTitle, rightTitleProps, _reactNative.StyleSheet.flatten([styles.title, styles.rightTitle, rightTitleStyle])), renderText(rightSubtitle, rightSubtitleProps, _reactNative.StyleSheet.flatten([styles.subtitle, styles.rightSubtitle, rightSubtitleStyle]))), input && _react.default.createElement(_Input.default, (0, _extends2.default)({}, input, {
    inputStyle: _reactNative.StyleSheet.flatten([styles.input, input && input.inputStyle]),
    inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContentContainer, input && input.inputContainerStyle]),
    containerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, input && input.containerStyle])
  })), switchProps && _react.default.createElement(_reactNative.Switch, switchProps), checkBox && _react.default.createElement(_CheckBox.default, (0, _extends2.default)({}, checkBox, {
    containerStyle: _reactNative.StyleSheet.flatten([styles.checkboxContainer, checkBox && checkBox.containerStyle])
  })), badge && _react.default.createElement(_Badge.default, badge), buttonGroup && _react.default.createElement(_ButtonGroup.default, (0, _extends2.default)({}, buttonGroup, {
    containerStyle: _reactNative.StyleSheet.flatten([styles.buttonGroupContainer, buttonGroup && buttonGroup.containerStyle])
  })), renderAvatar(rightAvatar), renderIcon(rightIcon), (0, _helpers.renderNode)(_Text.default, rightElement), (0, _helpers.renderNode)(_Icon.default, checkmark, checkmarkDefaultProps(theme)), (0, _helpers.renderNode)(_Icon.default, chevron, chevronDefaultProps)));
};

exports.ListItem = ListItem;
var styles = {
  container: function container(theme) {
    return _objectSpread({}, _reactNative.Platform.select({
      ios: {
        padding: 14
      },
      default: {
        padding: 16
      }
    }), {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: 'white',
      borderColor: theme.colors.divider
    });
  },
  title: _objectSpread({
    backgroundColor: 'transparent'
  }, _reactNative.Platform.select({
    ios: {
      fontSize: 17
    },
    default: {
      fontSize: 16
    }
  })),
  subtitle: _objectSpread({
    backgroundColor: 'transparent'
  }, _reactNative.Platform.select({
    ios: {
      fontSize: 15
    },
    default: {
      color: ANDROID_SECONDARY,
      fontSize: 14
    }
  })),
  contentContainer: {
    flex: 1,
    justifyContent: 'center'
  },
  rightContentContainer: {
    flex: 0.5,
    justifyContent: 'center',
    alignItems: 'flex-end'
  },
  inputContainer: {
    flex: 1,
    paddingRight: 0
  },
  inputContentContainer: {
    flex: 1,
    borderBottomWidth: 0,
    width: null,
    height: null
  },
  input: {
    flex: 1,
    textAlign: 'right',
    width: null,
    height: null
  },
  checkboxContainer: {
    margin: 0,
    marginRight: 0,
    marginLeft: 0,
    padding: 0
  },
  buttonGroupContainer: {
    flex: 1,
    marginLeft: 0,
    marginRight: 0,
    marginTop: 0,
    marginBottom: 0
  },
  rightTitle: {
    color: ANDROID_SECONDARY
  },
  rightSubtitle: {
    color: ANDROID_SECONDARY
  }
};
ListItem.propTypes = {
  containerStyle: _config.ViewPropTypes.style,
  contentContainerStyle: _config.ViewPropTypes.style,
  rightContentContainerStyle: _config.ViewPropTypes.style,
  Component: _propTypes.default.elementType,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  titleStyle: _config.TextPropTypes.style,
  titleProps: _propTypes.default.object,
  subtitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  subtitleStyle: _config.TextPropTypes.style,
  subtitleProps: _propTypes.default.object,
  leftIcon: _helpers.nodeType,
  leftAvatar: _helpers.nodeType,
  leftElement: _helpers.nodeType,
  rightIcon: _helpers.nodeType,
  rightAvatar: _helpers.nodeType,
  rightElement: _helpers.nodeType,
  rightTitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  rightTitleStyle: _config.TextPropTypes.style,
  rightTitleProps: _propTypes.default.object,
  rightSubtitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  rightSubtitleStyle: _config.TextPropTypes.style,
  rightSubtitleProps: _propTypes.default.object,
  input: _propTypes.default.object,
  buttonGroup: _propTypes.default.object,
  switch: _propTypes.default.object,
  checkBox: _propTypes.default.object,
  badge: _propTypes.default.object,
  chevron: _helpers.nodeType,
  checkmark: _helpers.nodeType,
  disabled: _propTypes.default.bool,
  disabledStyle: _config.ViewPropTypes.style,
  topDivider: _propTypes.default.bool,
  bottomDivider: _propTypes.default.bool,
  pad: _propTypes.default.number,
  linearGradientProps: _propTypes.default.object,
  ViewComponent: _propTypes.default.elementType,
  theme: _propTypes.default.object
};
ListItem.defaultProps = {
  pad: 16,
  title: ''
};

var PadView = function (_React$Component) {
  (0, _inherits2.default)(PadView, _React$Component);

  function PadView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, PadView);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PadView).call(this, props));

    _this.setNativeProps = function (nativeProps) {
      _this._root.current.setNativeProps(nativeProps);
    };

    _this._root = _react.default.createRef();
    return _this;
  }

  (0, _createClass2.default)(PadView, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          pad = _this$props.pad,
          Component = _this$props.Component,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["children", "pad", "Component"]);

      var childrens = _react.default.Children.toArray(children);

      var length = childrens.length;
      var Container = Component || _reactNative.View;
      return _react.default.createElement(Container, (0, _extends2.default)({}, props, {
        ref: this._root
      }), _react.default.Children.map(childrens, function (child, index) {
        return child && [child, index !== length - 1 && _react.default.createElement(_reactNative.View, {
          width: pad
        })];
      }));
    }
  }]);
  return PadView;
}(_react.default.Component);

PadView.propTypes = {
  children: _propTypes.default.node,
  pad: _propTypes.default.number,
  Component: _propTypes.default.elementType
};

var _default = (0, _config.withTheme)(ListItem, 'ListItem');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,