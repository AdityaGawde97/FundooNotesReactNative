1d215d303adb33fc99f2a35859875cd8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeScreens = require("react-native-screens");

var _HeaderSegment = require("../Header/HeaderSegment");

var _CardContainer = _interopRequireDefault(require("./CardContainer"));

var _TransitionPresets = require("../../TransitionConfigs/TransitionPresets");

var _HeaderStyleInterpolators = require("../../TransitionConfigs/HeaderStyleInterpolators");

var _CardStyleInterpolators = require("../../TransitionConfigs/CardStyleInterpolators");

var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));

var _jsxFileName = "/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/CardStack.tsx";
var EPSILON = 1e-5;

var dimensions = _reactNative.Dimensions.get('window');

var layout = {
  width: dimensions.width,
  height: dimensions.height
};

var MaybeScreenContainer = function MaybeScreenContainer(_ref) {
  var enabled = _ref.enabled,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["enabled"]);

  if (_reactNative.Platform.OS !== 'ios' && enabled && (0, _reactNativeScreens.screensEnabled)()) {
    return React.createElement(_reactNativeScreens.ScreenContainer, (0, _extends2.default)({}, rest, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 90
      }
    }));
  }

  return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93
    }
  }));
};

var MaybeScreen = function MaybeScreen(_ref2) {
  var enabled = _ref2.enabled,
      active = _ref2.active,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["enabled", "active"]);

  if (_reactNative.Platform.OS !== 'ios' && enabled && (0, _reactNativeScreens.screensEnabled)()) {
    return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({
      active: active
    }, rest, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107
      }
    }));
  }

  return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110
    }
  }));
};

var FALLBACK_DESCRIPTOR = Object.freeze({
  options: {}
});

var getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {
  return routes.reduce(function (acc, curr) {
    var _ref3 = descriptors[curr.key] || {},
        _ref3$options = _ref3.options,
        options = _ref3$options === void 0 ? {} : _ref3$options;

    var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(options.headerStyle || {}),
        _StyleSheet$flatten$h = _StyleSheet$flatten.height,
        height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;

    var safeAreaInsets = (0, _objectSpread3.default)({}, insets, options.safeAreaInsets);
    var _options$headerStatus = options.headerStatusBarHeight,
        headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;
    acc[curr.key] = typeof height === 'number' ? height : (0, _HeaderSegment.getDefaultHeaderHeight)(layout, headerStatusBarHeight);
    return acc;
  }, {});
};

var getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {
  var _ref4 = (descriptor == null ? void 0 : descriptor.options) || {},
      _ref4$gestureDirectio = _ref4.gestureDirection,
      gestureDirection = _ref4$gestureDirectio === void 0 ? mode === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref4$gestureDirectio;

  return (0, _getDistanceForDirection.default)(layout, gestureDirection);
};

var getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {
  var distance = getDistanceFromOptions(mode, layout, descriptor);

  if (distance > 0) {
    return gesture.interpolate({
      inputRange: [0, distance],
      outputRange: [1, 0]
    });
  }

  return gesture.interpolate({
    inputRange: [distance, 0],
    outputRange: [0, 1]
  });
};

var CardStack = function (_React$Component) {
  (0, _inherits2.default)(CardStack, _React$Component);

  function CardStack() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, CardStack);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CardStack)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      routes: [],
      scenes: [],
      gestures: {},
      layout: layout,
      descriptors: _this.props.descriptors,
      headerHeights: {}
    };

    _this.handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;
      var layout = {
        width: width,
        height: height
      };

      _this.setState(function (state, props) {
        if (height === state.layout.height && width === state.layout.width) {
          return null;
        }

        return {
          layout: layout,
          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})
        };
      });
    };

    _this.handleHeaderLayout = function (_ref5) {
      var route = _ref5.route,
          height = _ref5.height;

      _this.setState(function (_ref6) {
        var headerHeights = _ref6.headerHeights;
        var previousHeight = headerHeights[route.key];

        if (previousHeight === height) {
          return null;
        }

        return {
          headerHeights: (0, _objectSpread3.default)({}, headerHeights, (0, _defineProperty2.default)({}, route.key, height))
        };
      });
    };

    return _this;
  }

  (0, _createClass2.default)(CardStack, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          insets = _this$props.insets,
          descriptors = _this$props.descriptors,
          state = _this$props.state,
          routes = _this$props.routes,
          closingRouteKeys = _this$props.closingRouteKeys,
          onOpenRoute = _this$props.onOpenRoute,
          onCloseRoute = _this$props.onCloseRoute,
          getPreviousRoute = _this$props.getPreviousRoute,
          getGesturesEnabled = _this$props.getGesturesEnabled,
          renderHeader = _this$props.renderHeader,
          renderScene = _this$props.renderScene,
          headerMode = _this$props.headerMode,
          onTransitionStart = _this$props.onTransitionStart,
          onTransitionEnd = _this$props.onTransitionEnd,
          onPageChangeStart = _this$props.onPageChangeStart,
          onPageChangeConfirm = _this$props.onPageChangeConfirm,
          onPageChangeCancel = _this$props.onPageChangeCancel;
      var _this$state = this.state,
          scenes = _this$state.scenes,
          layout = _this$state.layout,
          gestures = _this$state.gestures,
          headerHeights = _this$state.headerHeights;
      var focusedRoute = state.routes[state.index];
      var focusedDescriptor = descriptors[focusedRoute.key];
      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};
      var defaultTransitionPreset = mode === 'modal' ? _TransitionPresets.ModalTransition : _TransitionPresets.DefaultTransition;

      if (headerMode === 'screen') {
        defaultTransitionPreset = (0, _objectSpread3.default)({}, defaultTransitionPreset, {
          headerStyleInterpolator: _HeaderStyleInterpolators.forNoAnimation
        });
      }

      var _ref7 = focusedOptions.safeAreaInsets || {},
          _ref7$top = _ref7.top,
          top = _ref7$top === void 0 ? insets.top : _ref7$top,
          _ref7$right = _ref7.right,
          right = _ref7$right === void 0 ? insets.right : _ref7$right,
          _ref7$bottom = _ref7.bottom,
          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,
          _ref7$left = _ref7.left,
          left = _ref7$left === void 0 ? insets.left : _ref7$left;

      return React.createElement(React.Fragment, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 400
        }
      }, React.createElement(MaybeScreenContainer, {
        enabled: mode !== 'modal',
        style: styles.container,
        onLayout: this.handleLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 401
        }
      }, routes.map(function (route, index, self) {
        var focused = focusedRoute.key === route.key;
        var gesture = gestures[route.key];
        var scene = scenes[index];
        var isScreenActive = index === self.length - 1 ? 1 : _reactNative.Platform.OS === 'android' ? scene.progress.next ? scene.progress.next.interpolate({
          inputRange: [0, 1 - EPSILON, 1],
          outputRange: [1, 1, 0],
          extrapolate: 'clamp'
        }) : 1 : index === self.length - 2 ? 1 : 0;

        var _ref8 = scene.descriptor ? scene.descriptor.options : {},
            safeAreaInsets = _ref8.safeAreaInsets,
            headerShown = _ref8.headerShown,
            headerTransparent = _ref8.headerTransparent,
            cardShadowEnabled = _ref8.cardShadowEnabled,
            cardOverlayEnabled = _ref8.cardOverlayEnabled,
            cardStyle = _ref8.cardStyle,
            animationEnabled = _ref8.animationEnabled,
            gestureResponseDistance = _ref8.gestureResponseDistance,
            gestureVelocityImpact = _ref8.gestureVelocityImpact,
            _ref8$gestureDirectio = _ref8.gestureDirection,
            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,
            _ref8$transitionSpec = _ref8.transitionSpec,
            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,
            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,
            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,
            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,
            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;

        var transitionConfig = {
          gestureDirection: gestureDirection,
          transitionSpec: transitionSpec,
          cardStyleInterpolator: cardStyleInterpolator,
          headerStyleInterpolator: headerStyleInterpolator
        };

        if (index !== self.length - 1) {
          var nextScene = scenes[index + 1];

          if (nextScene) {
            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},
                _animationEnabled = _ref9.animationEnabled,
                _ref9$gestureDirectio = _ref9.gestureDirection,
                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,
                _ref9$transitionSpec = _ref9.transitionSpec,
                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,
                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,
                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,
                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,
                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;

            transitionConfig = {
              gestureDirection: _gestureDirection,
              transitionSpec: _transitionSpec,
              cardStyleInterpolator: _cardStyleInterpolator,
              headerStyleInterpolator: _headerStyleInterpolator
            };
          }
        }

        var _ref10 = safeAreaInsets || {},
            _ref10$top = _ref10.top,
            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,
            _ref10$right = _ref10.right,
            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,
            _ref10$bottom = _ref10.bottom,
            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,
            _ref10$left = _ref10.left,
            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;

        return React.createElement(MaybeScreen, {
          key: route.key,
          style: _reactNative.StyleSheet.absoluteFill,
          enabled: mode !== 'modal',
          active: isScreenActive,
          pointerEvents: "box-none",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 494
          }
        }, React.createElement(_CardContainer.default, (0, _extends2.default)({
          index: index,
          active: index === self.length - 1,
          focused: focused,
          closing: closingRouteKeys.includes(route.key),
          layout: layout,
          gesture: gesture,
          scene: scene,
          previousScene: scenes[index - 1],
          state: state,
          safeAreaInsetTop: safeAreaInsetTop,
          safeAreaInsetRight: safeAreaInsetRight,
          safeAreaInsetBottom: safeAreaInsetBottom,
          safeAreaInsetLeft: safeAreaInsetLeft,
          cardOverlayEnabled: cardOverlayEnabled,
          cardShadowEnabled: cardShadowEnabled,
          cardStyle: cardStyle,
          onPageChangeStart: onPageChangeStart,
          onPageChangeConfirm: onPageChangeConfirm,
          onPageChangeCancel: onPageChangeCancel,
          gestureResponseDistance: gestureResponseDistance,
          headerHeight: headerHeights[route.key],
          onHeaderHeightChange: _this2.handleHeaderLayout,
          getPreviousRoute: getPreviousRoute,
          headerMode: headerMode,
          headerShown: headerShown,
          headerTransparent: headerTransparent,
          renderHeader: renderHeader,
          renderScene: renderScene,
          onOpenRoute: onOpenRoute,
          onCloseRoute: onCloseRoute,
          onTransitionStart: onTransitionStart,
          onTransitionEnd: onTransitionEnd,
          gestureEnabled: index !== 0 && getGesturesEnabled({
            route: route
          }),
          gestureVelocityImpact: gestureVelocityImpact
        }, transitionConfig, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 501
          }
        })));
      })), headerMode === 'float' ? renderHeader({
        mode: 'float',
        layout: layout,
        insets: {
          top: top,
          right: right,
          bottom: bottom,
          left: left
        },
        scenes: scenes,
        state: state,
        getPreviousRoute: getPreviousRoute,
        onContentHeightChange: this.handleHeaderLayout,
        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,
        style: styles.floating
      }) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.routes === state.routes && props.descriptors === state.descriptors) {
        return null;
      }

      var gestures = props.routes.reduce(function (acc, curr) {
        var descriptor = props.descriptors[curr.key];

        var _ref11 = (descriptor == null ? void 0 : descriptor.options) || {},
            animationEnabled = _ref11.animationEnabled;

        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);
        return acc;
      }, {});
      return {
        routes: props.routes,
        scenes: props.routes.map(function (route, index, self) {
          var previousRoute = self[index - 1];
          var nextRoute = self[index + 1];
          var oldScene = state.scenes[index];
          var currentGesture = gestures[route.key];
          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;
          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;
          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);
          var nextDescriptor = props.descriptors[nextRoute == null ? void 0 : nextRoute.key] || state.descriptors[nextRoute == null ? void 0 : nextRoute.key];
          var previousDescriptor = props.descriptors[previousRoute == null ? void 0 : previousRoute.key] || state.descriptors[previousRoute == null ? void 0 : previousRoute.key];
          var scene = {
            route: route,
            descriptor: descriptor,
            progress: {
              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),
              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,
              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined
            },
            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]
          };

          if (oldScene && scene.__memo.every(function (it, i) {
            return oldScene.__memo[i] === it;
          })) {
            return oldScene;
          }

          return scene;
        }),
        gestures: gestures,
        descriptors: props.descriptors,
        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)
      };
    }
  }]);
  return CardStack;
}(React.Component);

exports.default = CardStack;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  floating: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,