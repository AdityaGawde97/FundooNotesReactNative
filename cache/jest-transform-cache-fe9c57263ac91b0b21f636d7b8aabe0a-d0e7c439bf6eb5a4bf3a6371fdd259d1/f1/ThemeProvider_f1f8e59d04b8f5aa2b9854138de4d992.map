{"version":3,"sources":["ThemeProvider.js"],"names":["ThemeContext","React","createContext","theme","colors","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","children","Component","propTypes","PropTypes","object","node","isRequired","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEO,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAANA;AADK;AADuC,CAApB,CAArB;;;;IAMcC,a;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,mHAAMA,KAAN;;AADiB,UAcnBC,WAdmB,GAcL,UAAAC,OAAO,EAAI;AACvB,YAAKC,QAAL,CAAc;AAAA,YAAGN,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAE,wBAAUA,KAAV,EAAiBK,OAAjB;AADqB,SAAhB;AAAA,OAAd;AAGD,KAlBkB;;AAAA,UAoBnBE,YApBmB,GAoBJ,UAAAP,KAAK,EAAI;AACtB,YAAKM,QAAL,CAAc;AAAA,eAAO;AACnBN,UAAAA,KAAK,EAAE,wBAAU,MAAKQ,YAAf,EAA6BR,KAA7B;AADY,SAAP;AAAA,OAAd;AAGD,KAxBkB;;AAAA,UA0BnBS,QA1BmB,GA0BR;AAAA,aAAM,MAAKC,KAAL,CAAWV,KAAjB;AAAA,KA1BQ;;AAGjB,UAAKQ,YAAL,GAAoB,wBAClB;AACEP,MAAAA,MAAM,EAANA;AADF,KADkB,EAIlBE,KAAK,CAACH,KAJY,CAApB;AAMA,UAAKU,KAAL,GAAa;AACXV,MAAAA,KAAK,EAAE,MAAKQ;AADD,KAAb;AATiB;AAYlB;;;;6BAgBQ;AACP,aACE,6BAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLR,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KADb;AAELI,UAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,UAAAA,YAAY,EAAE,KAAKA;AAHd;AADT,SAOG,KAAKJ,KAAL,CAAWQ,QAPd,CADF;AAWD;;;EAzCwCb,eAAMc,S;;;AA4CjDV,aAAa,CAACW,SAAd,GAA0B;AACxBb,EAAAA,KAAK,EAAEc,mBAAUC,MADO;AAExBJ,EAAAA,QAAQ,EAAEG,mBAAUE,IAAV,CAAeC;AAFD,CAA1B;AAKAf,aAAa,CAACgB,YAAd,GAA6B;AAC3BlB,EAAAA,KAAK,EAAE;AADoB,CAA7B;AAIO,IAAMmB,aAAa,GAAGtB,YAAY,CAACuB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultTheme = deepmerge(\n      {\n        colors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n    };\n  }\n\n  updateTheme = updates => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = theme => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]}