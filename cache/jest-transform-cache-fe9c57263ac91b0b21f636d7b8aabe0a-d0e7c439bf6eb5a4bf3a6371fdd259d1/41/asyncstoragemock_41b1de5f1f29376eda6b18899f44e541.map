{"version":3,"sources":["async-storage-mock.js"],"names":["asMock","__INTERNAL_MOCK_STORAGE__","setItem","jest","fn","key","value","callback","multiSet","undefined","setResult","getItem","multiGet","getResult","result","removeItem","multiRemove","mergeItem","multiMerge","clear","_clear","getAllKeys","_getAllKeys","flushGetRequests","_multiGet","_multiSet","_multiRemove","_multiMerge","keyValuePairs","forEach","keyValue","keys","values","map","Object","JSON","parse","oldValue","processedValue","stringify","_deepMergeInto","_isObject","obj","Array","isArray","oldObject","newObject","newKeys","mergedObject","newValue"],"mappings":"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","sourcesContent":["/**\n * @format\n * @flow\n */\n\ntype KeysType = Array<string>;\ntype KeyValueType = Array<Array<*>>;\ntype CallbackType = ((?Error) => void) | void;\ntype ItemGetCallbackType = ((?Error, ?string) => void) | void;\ntype ResultCallbackType = ((?Error, ?KeyValueType) => void) | void;\n\nconst asMock = {\n  __INTERNAL_MOCK_STORAGE__: {},\n\n  setItem: jest.fn<[string, string, CallbackType], Promise<*>>(\n    async (key: string, value: string, callback: CallbackType) => {\n      const setResult = await asMock.multiSet([[key, value]], undefined);\n\n      callback && callback(setResult);\n      return setResult;\n    },\n  ),\n  getItem: jest.fn<[string, ItemGetCallbackType], Promise<*>>(\n    async (key: string, callback: ItemGetCallbackType) => {\n      const getResult = await asMock.multiGet([key], undefined);\n\n      const result = getResult[0] ? getResult[0][1] : null;\n\n      callback && callback(null, result);\n      return result;\n    },\n  ),\n  removeItem: jest.fn<[string, CallbackType], Promise<null>>(\n    (key: string, callback: CallbackType) =>\n      asMock.multiRemove([key], callback),\n  ),\n  mergeItem: jest.fn<[string, string, CallbackType], Promise<*>>(\n    (key: string, value: string, callback: CallbackType) =>\n      asMock.multiMerge([[key, value]], callback),\n  ),\n\n  clear: jest.fn<[CallbackType], Promise<*>>(_clear),\n  getAllKeys: jest.fn<[], Promise<string[]>>(_getAllKeys),\n  flushGetRequests: jest.fn<[], void>(),\n\n  multiGet: jest.fn<[KeysType, ResultCallbackType], Promise<*>>(_multiGet),\n  multiSet: jest.fn<[KeyValueType, CallbackType], Promise<*>>(_multiSet),\n  multiRemove: jest.fn<[KeysType, CallbackType], Promise<*>>(_multiRemove),\n  multiMerge: jest.fn<[KeyValueType, CallbackType], Promise<*>>(_multiMerge),\n};\n\nasync function _multiSet(keyValuePairs: KeyValueType, callback: CallbackType) {\n  keyValuePairs.forEach(keyValue => {\n    const key = keyValue[0];\n    const value = keyValue[1];\n\n    asMock.__INTERNAL_MOCK_STORAGE__[key] = value;\n  });\n  callback && callback(null);\n  return null;\n}\n\nasync function _multiGet(keys: KeysType, callback: ResultCallbackType) {\n  const values = keys.map(key => [\n    key,\n    asMock.__INTERNAL_MOCK_STORAGE__[key] || null,\n  ]);\n  callback && callback(null, values);\n\n  return values;\n}\n\nasync function _multiRemove(keys: KeysType, callback: CallbackType) {\n  keys.forEach(key => {\n    if (asMock.__INTERNAL_MOCK_STORAGE__[key]) {\n      delete asMock.__INTERNAL_MOCK_STORAGE__[key];\n    }\n  });\n\n  callback && callback(null);\n  return null;\n}\n\nasync function _clear(callback: CallbackType) {\n  asMock.__INTERNAL_MOCK_STORAGE__ = {};\n\n  callback && callback(null);\n\n  return null;\n}\n\nasync function _getAllKeys() {\n  return Object.keys(asMock.__INTERNAL_MOCK_STORAGE__);\n}\n\nasync function _multiMerge(\n  keyValuePairs: KeyValueType,\n  callback: CallbackType,\n) {\n  keyValuePairs.forEach(keyValue => {\n    const key = keyValue[0];\n    const value = JSON.parse(keyValue[1]);\n\n    const oldValue = JSON.parse(asMock.__INTERNAL_MOCK_STORAGE__[key]);\n\n    const processedValue = JSON.stringify(_deepMergeInto(oldValue, value));\n\n    asMock.__INTERNAL_MOCK_STORAGE__[key] = processedValue;\n  });\n\n  callback && callback(null);\n  return null;\n}\n\nconst _isObject = obj => typeof obj === 'object' && !Array.isArray(obj);\nconst _deepMergeInto = (oldObject, newObject) => {\n  const newKeys = Object.keys(newObject);\n  const mergedObject = oldObject;\n\n  newKeys.forEach(key => {\n    const oldValue = mergedObject[key];\n    const newValue = newObject[key];\n\n    if (_isObject(oldValue) && _isObject(newValue)) {\n      mergedObject[key] = _deepMergeInto(oldValue, newValue);\n    } else {\n      mergedObject[key] = newValue;\n    }\n  });\n\n  return mergedObject;\n};\n\nexport default asMock;\n"]}