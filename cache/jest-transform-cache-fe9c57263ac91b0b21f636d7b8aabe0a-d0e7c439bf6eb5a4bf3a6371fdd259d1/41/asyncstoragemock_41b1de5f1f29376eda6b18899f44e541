b3c1e430b57b43898e973f32e35c1605
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var asMock = {
  __INTERNAL_MOCK_STORAGE__: {},
  setItem: jest.fn(function _callee(key, value, callback) {
    var setResult;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(asMock.multiSet([[key, value]], undefined));

          case 2:
            setResult = _context.sent;
            callback && callback(setResult);
            return _context.abrupt("return", setResult);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  }),
  getItem: jest.fn(function _callee2(key, callback) {
    var getResult, result;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(asMock.multiGet([key], undefined));

          case 2:
            getResult = _context2.sent;
            result = getResult[0] ? getResult[0][1] : null;
            callback && callback(null, result);
            return _context2.abrupt("return", result);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    });
  }),
  removeItem: jest.fn(function (key, callback) {
    return asMock.multiRemove([key], callback);
  }),
  mergeItem: jest.fn(function (key, value, callback) {
    return asMock.multiMerge([[key, value]], callback);
  }),
  clear: jest.fn(_clear),
  getAllKeys: jest.fn(_getAllKeys),
  flushGetRequests: jest.fn(),
  multiGet: jest.fn(_multiGet),
  multiSet: jest.fn(_multiSet),
  multiRemove: jest.fn(_multiRemove),
  multiMerge: jest.fn(_multiMerge)
};

function _multiSet(keyValuePairs, callback) {
  return _regenerator.default.async(function _multiSet$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          keyValuePairs.forEach(function (keyValue) {
            var key = keyValue[0];
            var value = keyValue[1];
            asMock.__INTERNAL_MOCK_STORAGE__[key] = value;
          });
          callback && callback(null);
          return _context3.abrupt("return", null);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function _multiGet(keys, callback) {
  var values;
  return _regenerator.default.async(function _multiGet$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          values = keys.map(function (key) {
            return [key, asMock.__INTERNAL_MOCK_STORAGE__[key] || null];
          });
          callback && callback(null, values);
          return _context4.abrupt("return", values);

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function _multiRemove(keys, callback) {
  return _regenerator.default.async(function _multiRemove$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          keys.forEach(function (key) {
            if (asMock.__INTERNAL_MOCK_STORAGE__[key]) {
              delete asMock.__INTERNAL_MOCK_STORAGE__[key];
            }
          });
          callback && callback(null);
          return _context5.abrupt("return", null);

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  });
}

function _clear(callback) {
  return _regenerator.default.async(function _clear$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          asMock.__INTERNAL_MOCK_STORAGE__ = {};
          callback && callback(null);
          return _context6.abrupt("return", null);

        case 3:
        case "end":
          return _context6.stop();
      }
    }
  });
}

function _getAllKeys() {
  return _regenerator.default.async(function _getAllKeys$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          return _context7.abrupt("return", Object.keys(asMock.__INTERNAL_MOCK_STORAGE__));

        case 1:
        case "end":
          return _context7.stop();
      }
    }
  });
}

function _multiMerge(keyValuePairs, callback) {
  return _regenerator.default.async(function _multiMerge$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          keyValuePairs.forEach(function (keyValue) {
            var key = keyValue[0];
            var value = JSON.parse(keyValue[1]);
            var oldValue = JSON.parse(asMock.__INTERNAL_MOCK_STORAGE__[key]);
            var processedValue = JSON.stringify(_deepMergeInto(oldValue, value));
            asMock.__INTERNAL_MOCK_STORAGE__[key] = processedValue;
          });
          callback && callback(null);
          return _context8.abrupt("return", null);

        case 3:
        case "end":
          return _context8.stop();
      }
    }
  });
}

var _isObject = function _isObject(obj) {
  return typeof obj === 'object' && !Array.isArray(obj);
};

var _deepMergeInto = function _deepMergeInto(oldObject, newObject) {
  var newKeys = Object.keys(newObject);
  var mergedObject = oldObject;
  newKeys.forEach(function (key) {
    var oldValue = mergedObject[key];
    var newValue = newObject[key];

    if (_isObject(oldValue) && _isObject(newValue)) {
      mergedObject[key] = _deepMergeInto(oldValue, newValue);
    } else {
      mergedObject[key] = newValue;
    }
  });
  return mergedObject;
};

var _default = asMock;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,