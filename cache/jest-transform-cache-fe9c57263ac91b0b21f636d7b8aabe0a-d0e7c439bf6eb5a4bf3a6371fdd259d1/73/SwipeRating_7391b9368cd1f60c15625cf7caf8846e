a92fead6a603d43ba3e67d29f50ecfd4
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _times = _interopRequireDefault(require("lodash/times"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var STAR_IMAGE = require('./images/star.png');

var HEART_IMAGE = require('./images/heart.png');

var ROCKET_IMAGE = require('./images/rocket.png');

var BELL_IMAGE = require('./images/bell.png');

var TYPES = {
  star: {
    source: STAR_IMAGE,
    color: '#f1c40f',
    backgroundColor: 'white'
  },
  heart: {
    source: HEART_IMAGE,
    color: '#e74c3c',
    backgroundColor: 'white'
  },
  rocket: {
    source: ROCKET_IMAGE,
    color: '#2ecc71',
    backgroundColor: 'white'
  },
  bell: {
    source: BELL_IMAGE,
    color: '#f39c12',
    backgroundColor: 'white'
  }
};

var SwipeRating = function (_Component) {
  (0, _inherits2.default)(SwipeRating, _Component);

  function SwipeRating(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SwipeRating);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwipeRating).call(this, props));
    var _this$props = _this.props,
        onStartRating = _this$props.onStartRating,
        onFinishRating = _this$props.onFinishRating,
        fractions = _this$props.fractions;
    var position = new _reactNative.Animated.ValueXY();

    var panResponder = _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onPanResponderGrant: function onPanResponderGrant() {
        if (typeof onStartRating === 'function') {
          onStartRating();
        }
      },
      onPanResponderMove: function onPanResponderMove(event, gesture) {
        var newPosition = new _reactNative.Animated.ValueXY();
        newPosition.setValue({
          x: gesture.dx,
          y: 0
        });

        _this.setState({
          position: newPosition,
          value: gesture.dx
        });
      },
      onPanResponderRelease: function onPanResponderRelease(event) {
        var rating = _this.getCurrentRating(_this.state.value);

        if (rating >= _this.props.minValue) {
          if (!fractions) {
            _this.setCurrentRating(rating);
          }

          onFinishRating(rating);
        }
      }
    });

    _this.state = {
      panResponder: panResponder,
      position: position,
      display: false
    };
    return _this;
  }

  (0, _createClass2.default)(SwipeRating, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _STAR_IMAGE, _HEART_IMAGE, _ROCKET_IMAGE, _BELL_IMAGE;

      return _regenerator.default.async(function componentDidMount$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _regenerator.default.awrap(require('./images/star.png'));

            case 3:
              _STAR_IMAGE = _context.sent;
              _context.next = 6;
              return _regenerator.default.awrap(require('./images/heart.png'));

            case 6:
              _HEART_IMAGE = _context.sent;
              _context.next = 9;
              return _regenerator.default.awrap(require('./images/rocket.png'));

            case 9:
              _ROCKET_IMAGE = _context.sent;
              _context.next = 12;
              return _regenerator.default.awrap(require('./images/bell.png'));

            case 12:
              _BELL_IMAGE = _context.sent;
              this.setState({
                display: true
              });
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](0);
              console.log(_context.t0);

            case 19:
              this.setCurrentRating(this.props.startingValue);

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[0, 16]]);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.startingValue !== prevProps.startingValue) {
        this.setCurrentRating(this.props.startingValue);
      }
    }
  }, {
    key: "getPrimaryViewStyle",
    value: function getPrimaryViewStyle() {
      var position = this.state.position;
      var _this$props2 = this.props,
          imageSize = _this$props2.imageSize,
          ratingCount = _this$props2.ratingCount,
          type = _this$props2.type;
      var color = TYPES[type].color;
      var width = position.x.interpolate({
        inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
        outputRange: [0, ratingCount * imageSize / 2, ratingCount * imageSize],
        extrapolate: 'clamp'
      }, {
        useNativeDriver: true
      });
      return {
        backgroundColor: color,
        width: width,
        height: width ? imageSize : 0
      };
    }
  }, {
    key: "getSecondaryViewStyle",
    value: function getSecondaryViewStyle() {
      var position = this.state.position;
      var _this$props3 = this.props,
          imageSize = _this$props3.imageSize,
          ratingCount = _this$props3.ratingCount,
          type = _this$props3.type;
      var backgroundColor = TYPES[type].backgroundColor;
      var width = position.x.interpolate({
        inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
        outputRange: [ratingCount * imageSize, ratingCount * imageSize / 2, 0],
        extrapolate: 'clamp'
      }, {
        useNativeDriver: true
      });
      return {
        backgroundColor: backgroundColor,
        width: width,
        height: width ? imageSize : 0
      };
    }
  }, {
    key: "renderRatings",
    value: function renderRatings() {
      var _this$props4 = this.props,
          imageSize = _this$props4.imageSize,
          ratingCount = _this$props4.ratingCount,
          type = _this$props4.type,
          tintColor = _this$props4.tintColor;
      var source = TYPES[type].source;
      return (0, _times.default)(ratingCount, function (index) {
        return _react.default.createElement(_reactNative.View, {
          key: index,
          style: styles.starContainer
        }, _react.default.createElement(_reactNative.Image, {
          source: source,
          style: {
            width: imageSize,
            height: imageSize,
            tintColor: tintColor
          }
        }));
      });
    }
  }, {
    key: "getCurrentRating",
    value: function getCurrentRating(value) {
      var _this$props5 = this.props,
          fractions = _this$props5.fractions,
          imageSize = _this$props5.imageSize,
          ratingCount = _this$props5.ratingCount;
      var startingValue = ratingCount / 2;
      var currentRating = this.props.minValue ? this.props.minValue : 0;

      if (value > ratingCount * imageSize / 2) {
        currentRating = ratingCount;
      } else if (value < -ratingCount * imageSize / 2) {
        currentRating = this.props.minValue ? this.props.minValue : 0;
      } else if (value <= imageSize || value > imageSize) {
        currentRating = startingValue + value / imageSize;
        currentRating = !fractions ? Math.ceil(currentRating) : +currentRating.toFixed(fractions);
      } else {
        currentRating = !fractions ? Math.ceil(startingValue) : +startingValue.toFixed(fractions);
      }

      return currentRating;
    }
  }, {
    key: "setCurrentRating",
    value: function setCurrentRating(rating) {
      var _this$props6 = this.props,
          imageSize = _this$props6.imageSize,
          ratingCount = _this$props6.ratingCount;
      var initialRating = ratingCount / 2;
      var value = null;

      if (rating > ratingCount) {
        value = ratingCount * imageSize / 2;
      } else if (rating < 0) {
        value = -ratingCount * imageSize / 2;
      } else if (rating < ratingCount / 2 || rating > ratingCount / 2) {
        value = (rating - initialRating) * imageSize;
      } else {
        value = 0;
      }

      var newPosition = new _reactNative.Animated.ValueXY();
      newPosition.setValue({
        x: value,
        y: 0
      });
      this.setState({
        position: newPosition,
        value: value
      });
    }
  }, {
    key: "displayCurrentRating",
    value: function displayCurrentRating() {
      var _this$props7 = this.props,
          ratingCount = _this$props7.ratingCount,
          type = _this$props7.type,
          readonly = _this$props7.readonly,
          ratingTextColor = _this$props7.ratingTextColor;
      var color = ratingTextColor || TYPES[type].color;
      return _react.default.createElement(_reactNative.View, {
        style: styles.showRatingView
      }, _react.default.createElement(_reactNative.View, {
        style: styles.ratingView
      }, _react.default.createElement(_reactNative.Text, {
        style: [styles.ratingText, {
          color: color
        }]
      }, "Rating:", ' '), _react.default.createElement(_reactNative.Text, {
        style: [styles.currentRatingText, {
          color: color
        }]
      }, this.getCurrentRating(this.state.value)), _react.default.createElement(_reactNative.Text, {
        style: [styles.maxRatingText, {
          color: color
        }]
      }, "/", ratingCount)), _react.default.createElement(_reactNative.View, null, readonly && _react.default.createElement(_reactNative.Text, {
        style: [styles.readonlyLabel, {
          color: color
        }]
      }, "(readonly)")));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          readonly = _this$props8.readonly,
          type = _this$props8.type,
          ratingImage = _this$props8.ratingImage,
          ratingColor = _this$props8.ratingColor,
          ratingBackgroundColor = _this$props8.ratingBackgroundColor,
          style = _this$props8.style,
          showRating = _this$props8.showRating;

      if (type === 'custom') {
        var custom = {
          source: ratingImage,
          color: ratingColor,
          backgroundColor: ratingBackgroundColor
        };
        TYPES.custom = custom;
      }

      return this.state.display ? _react.default.createElement(_reactNative.View, {
        pointerEvents: readonly ? 'none' : 'auto',
        style: style
      }, showRating && this.displayCurrentRating(), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
        style: styles.starsWrapper
      }, this.state.panResponder.panHandlers), _react.default.createElement(_reactNative.View, {
        style: styles.starsInsideWrapper
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: this.getPrimaryViewStyle()
      }), _react.default.createElement(_reactNative.Animated.View, {
        style: this.getSecondaryViewStyle()
      })), this.renderRatings())) : null;
    }
  }]);
  return SwipeRating;
}(_react.Component);

exports.default = SwipeRating;
SwipeRating.defaultProps = {
  type: 'star',
  ratingImage: require('./images/star.png'),
  ratingColor: '#f1c40f',
  ratingBackgroundColor: 'white',
  ratingCount: 5,
  imageSize: 40,
  onFinishRating: function onFinishRating() {
    return console.log('Attach a onFinishRating function here.');
  },
  minValue: 0
};

var styles = _reactNative.StyleSheet.create({
  starsWrapper: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  starsInsideWrapper: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  showRatingView: {
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 5
  },
  ratingView: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 5
  },
  ratingText: {
    fontSize: 15,
    textAlign: 'center',
    fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
    color: '#34495e'
  },
  readonlyLabel: {
    justifyContent: 'center',
    alignItems: 'center',
    fontSize: 12,
    textAlign: 'center',
    fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
    color: '#34495a'
  },
  currentRatingText: {
    fontSize: 30,
    textAlign: 'center',
    fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null
  },
  maxRatingText: {
    fontSize: 18,
    textAlign: 'center',
    fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
    color: '#34495e'
  }
});

var fractionsType = function fractionsType(props, propName, componentName) {
  if (props[propName]) {
    var value = props[propName];

    if (typeof value === 'number') {
      return value >= 0 && value <= 20 ? null : new Error("`" + propName + "` in `" + componentName + "` must be between 0 and 20");
    }

    return new Error("`" + propName + "` in `" + componentName + "` must be a number");
  }
};

SwipeRating.propTypes = {
  type: _propTypes.default.string,
  ratingImage: _reactNative.Image.propTypes.source,
  ratingColor: _propTypes.default.string,
  ratingBackgroundColor: _propTypes.default.string,
  ratingCount: _propTypes.default.number,
  ratingTextColor: _propTypes.default.string,
  imageSize: _propTypes.default.number,
  onStartRating: _propTypes.default.func,
  onFinishRating: _propTypes.default.func,
  showRating: _propTypes.default.bool,
  style: _reactNative.ViewPropTypes.style,
  readonly: _propTypes.default.bool,
  startingValue: _propTypes.default.number,
  fractions: fractionsType,
  minValue: _propTypes.default.number
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,