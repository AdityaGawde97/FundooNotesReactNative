974f69f277d761c9bd2f4879f01143c6
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireWildcard(require("./styles"));

var Line = function (_PureComponent) {
  (0, _inherits2.default)(Line, _PureComponent);

  function Line() {
    (0, _classCallCheck2.default)(this, Line);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Line).apply(this, arguments));
  }

  (0, _createClass2.default)(Line, [{
    key: "borderProps",
    value: function borderProps() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          restricted = _this$props.restricted,
          lineType = _this$props.lineType,
          lineWidth = _this$props.lineWidth,
          activeLineWidth = _this$props.activeLineWidth,
          disabledLineWidth = _this$props.disabledLineWidth,
          baseColor = _this$props.baseColor,
          tintColor = _this$props.tintColor,
          errorColor = _this$props.errorColor,
          focusAnimation = _this$props.focusAnimation;

      if (disabled) {
        return {
          borderColor: baseColor,
          borderWidth: disabledLineWidth
        };
      }

      if (restricted) {
        return {
          borderColor: errorColor,
          borderWidth: activeLineWidth
        };
      }

      return {
        borderColor: focusAnimation.interpolate({
          inputRange: [-1, 0, 1],
          outputRange: [errorColor, baseColor, tintColor]
        }),
        borderWidth: focusAnimation.interpolate({
          inputRange: [-1, 0, 1],
          outputRange: [activeLineWidth, lineWidth, activeLineWidth]
        }),
        borderStyle: lineType
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          lineType = _this$props2.lineType,
          labelWidth = _this$props2.labelWidth,
          labelAnimation = _this$props2.labelAnimation,
          contentInset = _this$props2.contentInset;

      if ('none' === lineType) {
        return null;
      }

      var labelOffset = 2 * (contentInset.left - 2 * _styles.borderRadius);

      var lineOffset = _reactNative.Animated.add(labelWidth, labelOffset);

      var topLineContainerStyle = {
        transform: [{
          scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
        }, {
          translateX: _reactNative.Animated.multiply(labelAnimation, lineOffset)
        }]
      };
      var leftContainerStyle = {
        width: contentInset.left - _styles.borderRadius
      };
      var rightContainerStyle = {
        width: contentInset.right - _styles.borderRadius
      };
      var topContainerStyle = {
        left: leftContainerStyle.width,
        right: rightContainerStyle.width
      };
      var lineStyle = this.borderProps();
      return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_reactNative.View, {
        style: [_styles.default.topContainer, topContainerStyle],
        pointerEvents: "none"
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.topLineContainer, topLineContainerStyle]
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.borderTop, lineStyle]
      }))), _react.default.createElement(_reactNative.View, {
        style: [_styles.default.rightContainer, rightContainerStyle],
        pointerEvents: "none"
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.borderRight, lineStyle]
      })), _react.default.createElement(_reactNative.View, {
        style: _styles.default.bottomContainer,
        pointerEvents: "none"
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.borderBottom, lineStyle]
      })), _react.default.createElement(_reactNative.View, {
        style: [_styles.default.leftContainer, leftContainerStyle],
        pointerEvents: "none"
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.borderLeft, lineStyle]
      })));
    }
  }]);
  return Line;
}(_react.PureComponent);

exports.default = Line;
Line.defaultProps = {
  lineType: 'solid',
  disabled: false,
  restricted: false
};
Line.propTypes = {
  lineType: _propTypes.default.oneOf(['solid', 'none']),
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  tintColor: _propTypes.default.string,
  baseColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  lineWidth: _propTypes.default.number,
  activeLineWidth: _propTypes.default.number,
  disabledLineWidth: _propTypes.default.number,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  labelAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  labelWidth: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  contentInset: _propTypes.default.shape({
    left: _propTypes.default.number,
    right: _propTypes.default.number
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,