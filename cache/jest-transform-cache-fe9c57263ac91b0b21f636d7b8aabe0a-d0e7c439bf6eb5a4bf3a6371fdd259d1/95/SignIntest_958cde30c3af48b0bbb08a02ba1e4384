5748e9f6eed8629efacc5d5039f03b7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignIn = _interopRequireDefault(require("../../src/Component/Login/SignIn"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null));
it('SignIn Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignIn.default, null));
});
describe('<SignIn/>', function () {
  it('SignIn Page renders correctly', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper.state('email')).toEqual('');
    expect(wrapper.state('password')).toEqual('');
  });
  var emailInput = wrapper.find('OutlinedTextField').first();
  var passInput = wrapper.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    emailInput.props().onChangeText('andy@gmail.com');
    passInput.props().onChangeText('Abc@1234');
    expect(wrapper.state('email')).toEqual('andy@gmail.com');
    expect(wrapper.state('password')).toEqual('Abc@1234');
  });
  it('props of OutlinedTextField', function () {
    expect(emailInput.findWhere(function (node) {
      return node.prop('label') === 'Email';
    })).toExist();
    expect(emailInput.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper.instance();
    expect(instance.validateForm()).toBe(true);
    emailInput.props().onChangeText('andygmail.com');
    expect(instance.validateForm()).toBe(false);
    emailInput.props().onChangeText('andy@gmail.com');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing validateForm mathod for password validation', function () {
    var instance = wrapper.instance();
    passInput.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    passInput.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing create Account Button', function () {
    expect(wrapper.find('TouchableOpacity').length).toBe(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpZ25Jbi10ZXN0LmpzIl0sIm5hbWVzIjpbIndyYXBwZXIiLCJpdCIsInJlbmRlcmVyIiwiY3JlYXRlIiwiZGVzY3JpYmUiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJzdGF0ZSIsInRvRXF1YWwiLCJlbWFpbElucHV0IiwiZmluZCIsImZpcnN0IiwicGFzc0lucHV0IiwibGFzdCIsInByb3BzIiwib25DaGFuZ2VUZXh0IiwiZmluZFdoZXJlIiwibm9kZSIsInByb3AiLCJ0b0V4aXN0IiwiaW5zdGFuY2UiLCJ2YWxpZGF0ZUZvcm0iLCJ0b0JlIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUdBOztBQUVBLElBQU1BLE9BQU8sR0FBRyxxQkFBUSw2QkFBQyxlQUFELE9BQVIsQ0FBaEI7QUFJQUMsRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQU07QUFDdENDLDZCQUFTQyxNQUFULENBQWdCLDZCQUFDLGVBQUQsT0FBaEI7QUFDSCxDQUZDLENBQUY7QUFJQUMsUUFBUSxDQUFDLFdBQUQsRUFBYyxZQUFNO0FBQ3hCSCxFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBTTtBQUN0Q0ksSUFBQUEsTUFBTSxDQUFDLHFCQUFRLDZCQUFDLGVBQUQsT0FBUixDQUFELENBQU4sQ0FBNEJDLGVBQTVCO0FBQ0gsR0FGQyxDQUFGO0FBSUFMLEVBQUFBLEVBQUUsQ0FBQyx3QkFBRCxFQUEyQixZQUFNO0FBQy9CSSxJQUFBQSxNQUFNLENBQUNMLE9BQU8sQ0FBQ08sS0FBUixDQUFjLE9BQWQsQ0FBRCxDQUFOLENBQStCQyxPQUEvQixDQUF1QyxFQUF2QztBQUNBSCxJQUFBQSxNQUFNLENBQUNMLE9BQU8sQ0FBQ08sS0FBUixDQUFjLFVBQWQsQ0FBRCxDQUFOLENBQWtDQyxPQUFsQyxDQUEwQyxFQUExQztBQUNILEdBSEMsQ0FBRjtBQUtBLE1BQU1DLFVBQVUsR0FBR1QsT0FBTyxDQUFDVSxJQUFSLENBQWEsbUJBQWIsRUFBa0NDLEtBQWxDLEVBQW5CO0FBQ0EsTUFBTUMsU0FBUyxHQUFHWixPQUFPLENBQUNVLElBQVIsQ0FBYSxtQkFBYixFQUFrQ0csSUFBbEMsRUFBbEI7QUFFQVosRUFBQUEsRUFBRSxDQUFDLDJEQUFELEVBQThELFlBQU07QUFFbEVRLElBQUFBLFVBQVUsQ0FBQ0ssS0FBWCxHQUFtQkMsWUFBbkIsQ0FBZ0MsZ0JBQWhDO0FBRUFILElBQUFBLFNBQVMsQ0FBQ0UsS0FBVixHQUFrQkMsWUFBbEIsQ0FBK0IsVUFBL0I7QUFFQVYsSUFBQUEsTUFBTSxDQUFDTCxPQUFPLENBQUNPLEtBQVIsQ0FBYyxPQUFkLENBQUQsQ0FBTixDQUErQkMsT0FBL0IsQ0FBdUMsZ0JBQXZDO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0wsT0FBTyxDQUFDTyxLQUFSLENBQWMsVUFBZCxDQUFELENBQU4sQ0FBa0NDLE9BQWxDLENBQTBDLFVBQTFDO0FBQ0gsR0FSQyxDQUFGO0FBVUFQLEVBQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQixZQUFNO0FBQ25DSSxJQUFBQSxNQUFNLENBQUNJLFVBQVUsQ0FBQ08sU0FBWCxDQUFxQixVQUFDQyxJQUFEO0FBQUEsYUFBVUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVixNQUF1QixPQUFqQztBQUFBLEtBQXJCLENBQUQsQ0FBTixDQUF1RUMsT0FBdkU7QUFDQWQsSUFBQUEsTUFBTSxDQUFDSSxVQUFVLENBQUNPLFNBQVgsQ0FBcUIsVUFBQ0MsSUFBRDtBQUFBLGFBQVVBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFlBQVYsTUFBNEIsS0FBdEM7QUFBQSxLQUFyQixDQUFELENBQU4sQ0FBMEVDLE9BQTFFO0FBQ0gsR0FIQyxDQUFGO0FBS0FsQixFQUFBQSxFQUFFLENBQUMsa0RBQUQsRUFBcUQsWUFBTTtBQUV6RCxRQUFNbUIsUUFBUSxHQUFHcEIsT0FBTyxDQUFDb0IsUUFBUixFQUFqQjtBQUNBZixJQUFBQSxNQUFNLENBQUNlLFFBQVEsQ0FBQ0MsWUFBVCxFQUFELENBQU4sQ0FBZ0NDLElBQWhDLENBQXFDLElBQXJDO0FBRUFiLElBQUFBLFVBQVUsQ0FBQ0ssS0FBWCxHQUFtQkMsWUFBbkIsQ0FBZ0MsZUFBaEM7QUFDQVYsSUFBQUEsTUFBTSxDQUFDZSxRQUFRLENBQUNDLFlBQVQsRUFBRCxDQUFOLENBQWdDQyxJQUFoQyxDQUFxQyxLQUFyQztBQUVBYixJQUFBQSxVQUFVLENBQUNLLEtBQVgsR0FBbUJDLFlBQW5CLENBQWdDLGdCQUFoQztBQUNBVixJQUFBQSxNQUFNLENBQUNlLFFBQVEsQ0FBQ0MsWUFBVCxFQUFELENBQU4sQ0FBZ0NDLElBQWhDLENBQXFDLElBQXJDO0FBRUgsR0FYQyxDQUFGO0FBYUFyQixFQUFBQSxFQUFFLENBQUMscURBQUQsRUFBd0QsWUFBTTtBQUU1RCxRQUFNbUIsUUFBUSxHQUFHcEIsT0FBTyxDQUFDb0IsUUFBUixFQUFqQjtBQUVBUixJQUFBQSxTQUFTLENBQUNFLEtBQVYsR0FBa0JDLFlBQWxCLENBQStCLEVBQS9CO0FBQ0FWLElBQUFBLE1BQU0sQ0FBQ2UsUUFBUSxDQUFDQyxZQUFULEVBQUQsQ0FBTixDQUFnQ0MsSUFBaEMsQ0FBcUMsS0FBckM7QUFFQVYsSUFBQUEsU0FBUyxDQUFDRSxLQUFWLEdBQWtCQyxZQUFsQixDQUErQixVQUEvQjtBQUNBVixJQUFBQSxNQUFNLENBQUNlLFFBQVEsQ0FBQ0MsWUFBVCxFQUFELENBQU4sQ0FBZ0NDLElBQWhDLENBQXFDLElBQXJDO0FBQ0gsR0FUQyxDQUFGO0FBV0FyQixFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBTTtBQVl0Q0ksSUFBQUEsTUFBTSxDQUFDTCxPQUFPLENBQUNVLElBQVIsQ0FBYSxrQkFBYixFQUFpQ2EsTUFBbEMsQ0FBTixDQUFnREQsSUFBaEQsQ0FBcUQsQ0FBckQ7QUFDSCxHQWJDLENBQUY7QUFjSCxDQWxFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFNpZ25JbiBmcm9tIFwiLi4vLi4vc3JjL0NvbXBvbmVudC9Mb2dpbi9TaWduSW5cIjtcblxuXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxTaWduSW4gLz4pXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqIFNpZ25JbiBDb21wb25lbnQgVGVzdGluZyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbml0KCdTaWduSW4gUGFnZSByZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICByZW5kZXJlci5jcmVhdGUoPFNpZ25JbiAvPik7XG59KTtcblxuZGVzY3JpYmUoJzxTaWduSW4vPicsICgpID0+IHtcbiAgICBpdCgnU2lnbkluIFBhZ2UgcmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzaGFsbG93KDxTaWduSW4gLz4pKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcblxuICAgIGl0KCdjaGVja2luZyBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgICAgICBleHBlY3Qod3JhcHBlci5zdGF0ZSgnZW1haWwnKSkudG9FcXVhbCgnJyk7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdwYXNzd29yZCcpKS50b0VxdWFsKCcnKTtcbiAgICB9KVxuXG4gICAgY29uc3QgZW1haWxJbnB1dCA9IHdyYXBwZXIuZmluZCgnT3V0bGluZWRUZXh0RmllbGQnKS5maXJzdCgpO1xuICAgIGNvbnN0IHBhc3NJbnB1dCA9IHdyYXBwZXIuZmluZCgnT3V0bGluZWRUZXh0RmllbGQnKS5sYXN0KCk7XG5cbiAgICBpdCgndGVzdGluZyBzdGF0ZSBvZiBjb21wb25lbnQgYWZ0ZXIgb25DaGFuZ2VUZXh0IGV2ZW50IG9jY3VyJywgKCkgPT4ge1xuXG4gICAgICAgIGVtYWlsSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ2FuZHlAZ21haWwuY29tJyk7XG5cbiAgICAgICAgcGFzc0lucHV0LnByb3BzKCkub25DaGFuZ2VUZXh0KCdBYmNAMTIzNCcpO1xuXG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdlbWFpbCcpKS50b0VxdWFsKCdhbmR5QGdtYWlsLmNvbScpO1xuICAgICAgICBleHBlY3Qod3JhcHBlci5zdGF0ZSgncGFzc3dvcmQnKSkudG9FcXVhbCgnQWJjQDEyMzQnKTtcbiAgICB9KVxuXG4gICAgaXQoJ3Byb3BzIG9mIE91dGxpbmVkVGV4dEZpZWxkJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZW1haWxJbnB1dC5maW5kV2hlcmUoKG5vZGUpID0+IG5vZGUucHJvcCgnbGFiZWwnKSA9PT0gJ0VtYWlsJykpLnRvRXhpc3QoKTtcbiAgICAgICAgZXhwZWN0KGVtYWlsSW5wdXQuZmluZFdoZXJlKChub2RlKSA9PiBub2RlLnByb3AoJ2Vycm9yQ29sb3InKSA9PT0gJ3JlZCcpKS50b0V4aXN0KCk7XG4gICAgfSk7XG5cbiAgICBpdCgndGVzdGluZyB2YWxpZGF0ZUZvcm0gbWF0aG9kIGZvciBlbWFpbCB2YWxpZGF0aW9uJywgKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gd3JhcHBlci5pbnN0YW5jZSgpXG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZSh0cnVlKVxuXG4gICAgICAgIGVtYWlsSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ2FuZHlnbWFpbC5jb20nKTtcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnZhbGlkYXRlRm9ybSgpKS50b0JlKGZhbHNlKVxuXG4gICAgICAgIGVtYWlsSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ2FuZHlAZ21haWwuY29tJyk7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZSh0cnVlKVxuXG4gICAgfSlcblxuICAgIGl0KCd0ZXN0aW5nIHZhbGlkYXRlRm9ybSBtYXRob2QgZm9yIHBhc3N3b3JkIHZhbGlkYXRpb24nLCAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB3cmFwcGVyLmluc3RhbmNlKClcblxuICAgICAgICBwYXNzSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJycpO1xuICAgICAgICBleHBlY3QoaW5zdGFuY2UudmFsaWRhdGVGb3JtKCkpLnRvQmUoZmFsc2UpXG5cbiAgICAgICAgcGFzc0lucHV0LnByb3BzKCkub25DaGFuZ2VUZXh0KCdBYmNAMTIzNCcpO1xuICAgICAgICBleHBlY3QoaW5zdGFuY2UudmFsaWRhdGVGb3JtKCkpLnRvQmUodHJ1ZSlcbiAgICB9KVxuXG4gICAgaXQoJ3Rlc3RpbmcgY3JlYXRlIEFjY291bnQgQnV0dG9uJywgKCkgPT4ge1xuICAgICAgICAvLyB3cmFwcGVyLmZpbmQoJ0J1dHRvbicpLmZpcnN0KCkuaW52b2tlKCdvblByZXNzJykoKS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gICAgIC8vZXhwZWN0KHdyYXBwZXIucHJvcHMoKSlcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHdyYXBwZXIucHJvcHMoKSlcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vY29uc3QgY3JlYXRlQnV0dG9uID0gd3JhcHBlci5maW5kKFZpZXcpLlxuICAgICAgICAvLyAuZmluZFdoZXJlKCh0aXRsZSkgPT4gdGl0bGUucHJvcCgndGl0bGUnKSA9PT0gJ0NyZWF0ZSBBY2NvdW50JyApO1xuICAgICAgICAvLyBjcmVhdGVCdXR0b24uaW52b2tlKCdvblByZXNzJykoKS50aGVuKCgpPT57XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyh3cmFwcGVyLnByb3BzKCkpXG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vY3JlYXRlQnV0dG9uLnNpbXVsYXRlKCdjbGljaycpXG4gICAgICAgIC8vY3JlYXRlQnV0dG9uLmZpbmRXaGVyZSgobm9kZSkgPT4gbm9kZS5wcm9wKCd0eXBlJykgPT09ICdjbGVhcicpXG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1RvdWNoYWJsZU9wYWNpdHknKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgfSlcbn0pO1xuIl19