bfa3c748fa0c1d09f3654b0d51fb72ac
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var lineTypes = _propTypes.default.oneOf(['solid', 'dotted', 'dashed', 'none']);

var Line = function (_PureComponent) {
  (0, _inherits2.default)(Line, _PureComponent);

  function Line() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Line);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Line)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      maxLineWidth: 1
    };
    return _this;
  }

  (0, _createClass2.default)(Line, [{
    key: "borderProps",
    value: function borderProps() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          restricted = _this$props.restricted,
          lineWidth = _this$props.lineWidth,
          activeLineWidth = _this$props.activeLineWidth,
          disabledLineWidth = _this$props.disabledLineWidth,
          baseColor = _this$props.baseColor,
          tintColor = _this$props.tintColor,
          errorColor = _this$props.errorColor,
          focusAnimation = _this$props.focusAnimation;

      if (disabled) {
        return {
          borderColor: baseColor,
          borderWidth: disabledLineWidth
        };
      }

      if (restricted) {
        return {
          borderColor: errorColor,
          borderWidth: activeLineWidth
        };
      }

      return {
        borderColor: focusAnimation.interpolate({
          inputRange: [-1, 0, 1],
          outputRange: [errorColor, baseColor, tintColor]
        }),
        borderWidth: focusAnimation.interpolate({
          inputRange: [-1, 0, 1],
          outputRange: [activeLineWidth, lineWidth, activeLineWidth]
        })
      };
    }
  }, {
    key: "render",
    value: function render() {
      var maxLineWidth = this.state.maxLineWidth;
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          lineType = _this$props2.lineType,
          disabledLineType = _this$props2.disabledLineType;
      var borderStyle = disabled ? disabledLineType : lineType;

      if ('none' === borderStyle) {
        return null;
      }

      var _Array$from = Array.from(new Array(3), function () {
        return -1.5 * maxLineWidth;
      }),
          _Array$from2 = (0, _slicedToArray2.default)(_Array$from, 3),
          top = _Array$from2[0],
          right = _Array$from2[1],
          left = _Array$from2[2];

      var lineStyle = _objectSpread({}, this.borderProps(), {
        borderStyle: borderStyle,
        top: top,
        right: right,
        left: left
      });

      return _react.default.createElement(_reactNative.View, {
        style: _styles.default.container,
        pointerEvents: "none"
      }, _react.default.createElement(_reactNative.Animated.View, {
        style: [_styles.default.line, lineStyle]
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var lineWidth = props.lineWidth,
          activeLineWidth = props.activeLineWidth,
          disabledLineWidth = props.disabledLineWidth;
      var maxLineWidth = Math.max(lineWidth, activeLineWidth, disabledLineWidth, 1);

      if (maxLineWidth !== state.maxLineWidth) {
        return {
          maxLineWidth: maxLineWidth
        };
      }

      return null;
    }
  }]);
  return Line;
}(_react.PureComponent);

exports.default = Line;
Line.defaultProps = {
  lineType: 'solid',
  disabledLineType: 'dotted',
  disabled: false,
  restricted: false
};
Line.propTypes = {
  lineType: lineTypes,
  disabledLineType: lineTypes,
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  tintColor: _propTypes.default.string,
  baseColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  lineWidth: _propTypes.default.number,
  activeLineWidth: _propTypes.default.number,
  disabledLineWidth: _propTypes.default.number,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,