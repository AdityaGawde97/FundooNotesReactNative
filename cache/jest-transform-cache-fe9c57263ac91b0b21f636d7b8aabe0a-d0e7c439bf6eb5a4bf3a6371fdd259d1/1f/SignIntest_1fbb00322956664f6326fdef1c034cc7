2f6317cb545880fb6d59b57aad1341d8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignIn = _interopRequireDefault(require("../../src/Component/Login/SignIn"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null));
it('SignIn Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignIn.default, null));
});
describe('<SignIn/>', function () {
  it('SignIn Page renders correctly', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper.state('email')).toEqual('');
    expect(wrapper.state('password')).toEqual('');
  });
  var emailInput = wrapper.find('OutlinedTextField').first();
  var passInput = wrapper.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    emailInput.props().onChangeText('andy@gmail.com');
    passInput.props().onChangeText('Abc@1234');
    expect(wrapper.state('email')).toEqual('andy@gmail.com');
    expect(wrapper.state('password')).toEqual('Abc@1234');
  });
  it('props of OutlinedTextField', function () {
    expect(emailInput.findWhere(function (node) {
      return node.prop('label') === 'Email';
    })).toExist();
    expect(emailInput.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper.instance();
    expect(instance.validateForm()).toBe(true);
    emailInput.props().onChangeText('andygmail.com');
    expect(instance.validateForm()).toBe(false);
    emailInput.props().onChangeText('andy@gmail.com');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing validateForm mathod for password validation', function () {
    var instance = wrapper.instance();
    passInput.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    passInput.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing create Account Button', function () {
    createButton.findWhere(function (node) {
      return node.prop('type') === 'clear';
    });
    expect(wrapper.find(View)).to.have.length(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpZ25Jbi10ZXN0LmpzIl0sIm5hbWVzIjpbIndyYXBwZXIiLCJpdCIsInJlbmRlcmVyIiwiY3JlYXRlIiwiZGVzY3JpYmUiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJzdGF0ZSIsInRvRXF1YWwiLCJlbWFpbElucHV0IiwiZmluZCIsImZpcnN0IiwicGFzc0lucHV0IiwibGFzdCIsInByb3BzIiwib25DaGFuZ2VUZXh0IiwiZmluZFdoZXJlIiwibm9kZSIsInByb3AiLCJ0b0V4aXN0IiwiaW5zdGFuY2UiLCJ2YWxpZGF0ZUZvcm0iLCJ0b0JlIiwiY3JlYXRlQnV0dG9uIiwiVmlldyIsInRvIiwiaGF2ZSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFFQSxJQUFNQSxPQUFPLEdBQUcscUJBQVEsNkJBQUMsZUFBRCxPQUFSLENBQWhCO0FBSUFDLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFNO0FBQ3RDQyw2QkFBU0MsTUFBVCxDQUFnQiw2QkFBQyxlQUFELE9BQWhCO0FBQ0gsQ0FGQyxDQUFGO0FBSUFDLFFBQVEsQ0FBQyxXQUFELEVBQWMsWUFBTTtBQUN4QkgsRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQU07QUFDdENJLElBQUFBLE1BQU0sQ0FBQyxxQkFBUSw2QkFBQyxlQUFELE9BQVIsQ0FBRCxDQUFOLENBQTRCQyxlQUE1QjtBQUNILEdBRkMsQ0FBRjtBQUlBTCxFQUFBQSxFQUFFLENBQUMsd0JBQUQsRUFBMkIsWUFBTTtBQUMvQkksSUFBQUEsTUFBTSxDQUFDTCxPQUFPLENBQUNPLEtBQVIsQ0FBYyxPQUFkLENBQUQsQ0FBTixDQUErQkMsT0FBL0IsQ0FBdUMsRUFBdkM7QUFDQUgsSUFBQUEsTUFBTSxDQUFDTCxPQUFPLENBQUNPLEtBQVIsQ0FBYyxVQUFkLENBQUQsQ0FBTixDQUFrQ0MsT0FBbEMsQ0FBMEMsRUFBMUM7QUFDSCxHQUhDLENBQUY7QUFLQSxNQUFNQyxVQUFVLEdBQUdU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LENBQW1DQyxNQUFuQyxDQUEwQyxDQUExQztBQUNILEdBYkMsQ0FBRjtBQWNILENBbEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgU2lnbkluIGZyb20gXCIuLi8uLi9zcmMvQ29tcG9uZW50L0xvZ2luL1NpZ25JblwiO1xuXG5cbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPFNpZ25JbiAvPilcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKiogU2lnbkluIENvbXBvbmVudCBUZXN0aW5nICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaXQoJ1NpZ25JbiBQYWdlIHJlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcmVyLmNyZWF0ZSg8U2lnbkluIC8+KTtcbn0pO1xuXG5kZXNjcmliZSgnPFNpZ25Jbi8+JywgKCkgPT4ge1xuICAgIGl0KCdTaWduSW4gUGFnZSByZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNoYWxsb3coPFNpZ25JbiAvPikpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NoZWNraW5nIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdlbWFpbCcpKS50b0VxdWFsKCcnKTtcbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuc3RhdGUoJ3Bhc3N3b3JkJykpLnRvRXF1YWwoJycpO1xuICAgIH0pXG5cbiAgICBjb25zdCBlbWFpbElucHV0ID0gd3JhcHBlci5maW5kKCdPdXRsaW5lZFRleHRGaWVsZCcpLmZpcnN0KCk7XG4gICAgY29uc3QgcGFzc0lucHV0ID0gd3JhcHBlci5maW5kKCdPdXRsaW5lZFRleHRGaWVsZCcpLmxhc3QoKTtcblxuICAgIGl0KCd0ZXN0aW5nIHN0YXRlIG9mIGNvbXBvbmVudCBhZnRlciBvbkNoYW5nZVRleHQgZXZlbnQgb2NjdXInLCAoKSA9PiB7XG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keUBnbWFpbC5jb20nKTtcblxuICAgICAgICBwYXNzSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ0FiY0AxMjM0Jyk7XG5cbiAgICAgICAgZXhwZWN0KHdyYXBwZXIuc3RhdGUoJ2VtYWlsJykpLnRvRXF1YWwoJ2FuZHlAZ21haWwuY29tJyk7XG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLnN0YXRlKCdwYXNzd29yZCcpKS50b0VxdWFsKCdBYmNAMTIzNCcpO1xuICAgIH0pXG5cbiAgICBpdCgncHJvcHMgb2YgT3V0bGluZWRUZXh0RmllbGQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChlbWFpbElucHV0LmZpbmRXaGVyZSgobm9kZSkgPT4gbm9kZS5wcm9wKCdsYWJlbCcpID09PSAnRW1haWwnKSkudG9FeGlzdCgpO1xuICAgICAgICBleHBlY3QoZW1haWxJbnB1dC5maW5kV2hlcmUoKG5vZGUpID0+IG5vZGUucHJvcCgnZXJyb3JDb2xvcicpID09PSAncmVkJykpLnRvRXhpc3QoKTtcbiAgICB9KTtcblxuICAgIGl0KCd0ZXN0aW5nIHZhbGlkYXRlRm9ybSBtYXRob2QgZm9yIGVtYWlsIHZhbGlkYXRpb24nLCAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB3cmFwcGVyLmluc3RhbmNlKClcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnZhbGlkYXRlRm9ybSgpKS50b0JlKHRydWUpXG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keWdtYWlsLmNvbScpO1xuICAgICAgICBleHBlY3QoaW5zdGFuY2UudmFsaWRhdGVGb3JtKCkpLnRvQmUoZmFsc2UpXG5cbiAgICAgICAgZW1haWxJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnYW5keUBnbWFpbC5jb20nKTtcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnZhbGlkYXRlRm9ybSgpKS50b0JlKHRydWUpXG5cbiAgICB9KVxuXG4gICAgaXQoJ3Rlc3RpbmcgdmFsaWRhdGVGb3JtIG1hdGhvZCBmb3IgcGFzc3dvcmQgdmFsaWRhdGlvbicsICgpID0+IHtcblxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHdyYXBwZXIuaW5zdGFuY2UoKVxuXG4gICAgICAgIHBhc3NJbnB1dC5wcm9wcygpLm9uQ2hhbmdlVGV4dCgnJyk7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZShmYWxzZSlcblxuICAgICAgICBwYXNzSW5wdXQucHJvcHMoKS5vbkNoYW5nZVRleHQoJ0FiY0AxMjM0Jyk7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS52YWxpZGF0ZUZvcm0oKSkudG9CZSh0cnVlKVxuICAgIH0pXG5cbiAgICBpdCgndGVzdGluZyBjcmVhdGUgQWNjb3VudCBCdXR0b24nLCAoKSA9PiB7XG4gICAgICAgIC8vIHdyYXBwZXIuZmluZCgnQnV0dG9uJykuZmlyc3QoKS5pbnZva2UoJ29uUHJlc3MnKSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyAgICAgLy9leHBlY3Qod3JhcHBlci5wcm9wcygpKVxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cod3JhcHBlci5wcm9wcygpKVxuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy9jb25zdCBjcmVhdGVCdXR0b24gPSB3cmFwcGVyLmZpbmQoVmlldykuXG4gICAgICAgIC8vIC5maW5kV2hlcmUoKHRpdGxlKSA9PiB0aXRsZS5wcm9wKCd0aXRsZScpID09PSAnQ3JlYXRlIEFjY291bnQnICk7XG4gICAgICAgIC8vIGNyZWF0ZUJ1dHRvbi5pbnZva2UoJ29uUHJlc3MnKSgpLnRoZW4oKCk9PntcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHdyYXBwZXIucHJvcHMoKSlcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy9jcmVhdGVCdXR0b24uc2ltdWxhdGUoJ2NsaWNrJylcbiAgICAgICAgY3JlYXRlQnV0dG9uLmZpbmRXaGVyZSgobm9kZSkgPT4gbm9kZS5wcm9wKCd0eXBlJykgPT09ICdjbGVhcicpXG4gICAgICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoVmlldykpLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgIH0pXG59KTtcbiJdfQ==