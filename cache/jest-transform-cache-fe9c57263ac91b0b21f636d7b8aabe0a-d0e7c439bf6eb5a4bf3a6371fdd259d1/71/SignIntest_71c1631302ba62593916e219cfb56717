bf6eb41cca9ee7ede58edb6512fa367d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SignIn = _interopRequireDefault(require("../../src/Component/Login/SignIn"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null));
it('SignIn Page renders correctly', function () {
  _reactTestRenderer.default.create(_react.default.createElement(_SignIn.default, null));
});
describe('<SignIn/>', function () {
  it('SignIn Page renders correctly', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SignIn.default, null))).toMatchSnapshot();
  });
  it('checking initial state', function () {
    expect(wrapper.state('email')).toEqual('');
    expect(wrapper.state('password')).toEqual('');
  });
  var emailInput = wrapper.find('OutlinedTextField').first();
  var passInput = wrapper.find('OutlinedTextField').last();
  it('testing state of component after onChangeText event occur', function () {
    emailInput.props().onChangeText('andy@gmail.com');
    passInput.props().onChangeText('Abc@1234');
    expect(wrapper.state('email')).toEqual('andy@gmail.com');
    expect(wrapper.state('password')).toEqual('Abc@1234');
  });
  it('props of OutlinedTextField', function () {
    expect(emailInput.findWhere(function (node) {
      return node.prop('label') === 'Email';
    })).toExist();
    expect(emailInput.findWhere(function (node) {
      return node.prop('errorColor') === 'red';
    })).toExist();
  });
  it('testing validateForm mathod for email validation', function () {
    var instance = wrapper.instance();
    expect(instance.validateForm()).toBe(true);
    emailInput.props().onChangeText('andygmail.com');
    expect(instance.validateForm()).toBe(false);
    emailInput.props().onChangeText('andy@gmail.com');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing validateForm mathod for password validation', function () {
    var instance = wrapper.instance();
    passInput.props().onChangeText('');
    expect(instance.validateForm()).toBe(false);
    passInput.props().onChangeText('Abc@1234');
    expect(instance.validateForm()).toBe(true);
  });
  it('testing visible password toggling', function () {
    expect(wrapper.find('TouchableOpacity').length).toBe(1);
    expect(wrapper.state('visibleIcon')).toEqual(false);
    var passIcon = wrapper.find('TouchableOpacity');
    passIcon.simulate('press');
    expect(wrapper.state('visibleIcon')).toEqual(true);
    passIcon.simulate('press');
    expect(wrapper.state('visibleIcon')).toEqual(false);
  });
  it('testing Button', function () {
    expect(wrapper.findWhere(function (node) {
      return node.prop('title') === 'Create Account';
    }).length).toBe(1);
    var createAccountButton = wrapper.findWhere(function (node) {
      return node.prop('title') === 'Next';
    });
    wrapper.setState({
      email: 'abc@gmail.com',
      password: 'Abc@1234'
    });
    expect(wrapper.state('email')).toEqual('andy@gmail.com');
    expect(wrapper.state('password')).toEqual('Abc@1234');
    createAccountButton.simulate('press');
    expect(wrapper.state('errors.email')).toEqual(null);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,