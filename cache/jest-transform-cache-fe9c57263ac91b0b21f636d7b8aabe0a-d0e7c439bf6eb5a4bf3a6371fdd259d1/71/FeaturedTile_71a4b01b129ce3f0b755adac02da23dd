037b381d80c307dd041ff9e89bad3cb2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FeaturedTile = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _Text = _interopRequireDefault(require("../text/Text"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_Text.default, content, _objectSpread({}, defaultProps, {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};

var FeaturedTile = function FeaturedTile(props) {
  var title = props.title,
      icon = props.icon,
      caption = props.caption,
      imageSrc = props.imageSrc,
      containerStyle = props.containerStyle,
      imageContainerStyle = props.imageContainerStyle,
      overlayContainerStyle = props.overlayContainerStyle,
      iconContainerStyle = props.iconContainerStyle,
      titleStyle = props.titleStyle,
      captionStyle = props.captionStyle,
      ImageComponent = props.ImageComponent,
      imageProps = props.imageProps,
      attributes = (0, _objectWithoutProperties2.default)(props, ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle", "ImageComponent", "imageProps"]);
  var _props$width = props.width,
      width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? width * 0.8 : _props$height;

  var styles = _reactNative.StyleSheet.create({
    container: {
      width: width,
      height: height
    },
    imageContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      width: width,
      height: height
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      alignSelf: 'stretch',
      justifyContent: 'center',
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 45,
      paddingBottom: 40,
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    text: {
      color: '#ffffff',
      backgroundColor: 'rgba(0,0,0,0)',
      marginBottom: 15,
      textAlign: 'center'
    },
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      alignSelf: 'center'
    }
  });

  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle && containerStyle])
  }), _react.default.createElement(ImageComponent, (0, _extends2.default)({
    resizeMode: "cover"
  }, imageProps, {
    source: imageSrc,
    style: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle && overlayContainerStyle])
  }, _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle])
  }, icon && _react.default.createElement(_Icon.default, icon)), _react.default.createElement(_Text.default, {
    testID: "featuredTileTitle",
    h4: true,
    style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle])
  }, title), renderText(caption, {
    style: captionStyle
  }, styles.text))));
};

exports.FeaturedTile = FeaturedTile;
FeaturedTile.propTypes = {
  title: _propTypes.default.string,
  icon: _propTypes.default.object,
  caption: _propTypes.default.node,
  imageSrc: _reactNative.Image.propTypes.source,
  onPress: _propTypes.default.func,
  containerStyle: _config.ViewPropTypes.style,
  iconContainerStyle: _config.ViewPropTypes.style,
  imageContainerStyle: _config.ViewPropTypes.style,
  overlayContainerStyle: _config.ViewPropTypes.style,
  titleStyle: _reactNative.Text.propTypes.style,
  captionStyle: _reactNative.Text.propTypes.style,
  width: _propTypes.default.number,
  height: _propTypes.default.number,
  ImageComponent: _propTypes.default.elementType,
  imageProps: _propTypes.default.object
};
FeaturedTile.defaultProps = {
  ImageComponent: _config.BackgroundImage,
  imageProps: {}
};

var _default = (0, _config.withTheme)(FeaturedTile, 'FeaturedTile');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,