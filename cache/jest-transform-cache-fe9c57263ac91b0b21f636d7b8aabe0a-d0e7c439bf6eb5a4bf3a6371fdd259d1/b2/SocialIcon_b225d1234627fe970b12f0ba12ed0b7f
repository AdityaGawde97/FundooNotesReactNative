9187f5cba3eb2f641fbcff62cac96ca4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SocialIcon = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));

var _Text = _interopRequireDefault(require("../text/Text"));

var _fonts = _interopRequireDefault(require("../config/fonts"));

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var colors = {
  'github-alt': '#000000',
  'google-plus-official': '#dd4b39',
  google: '#dd4b39',
  'reddit-alien': '#fc461e',
  'stack-overflow': '#f27f33',
  angellist: '#1c4082',
  codepen: '#000000',
  envelope: '#000000',
  etsy: '#f2581e',
  facebook: '#3b5998',
  flickr: '#ff0084',
  foursquare: '#0072b1',
  github: '#000000',
  gitlab: '#e14329',
  instagram: '#517fa4',
  linkedin: '#007bb6',
  medium: '#02b875',
  pinterest: '#cb2027',
  quora: '#a82400',
  soundcloud: '#f50',
  steam: '#c6c3c1',
  stumbleupon: '#EB4823',
  tumblr: '#32506d',
  twitch: '#6441A5',
  twitter: '#00aced',
  vimeo: '#aad450',
  vk: '#5181b8',
  wechat: '#7bb32e',
  weibo: '#e6162d',
  wordpress: '#21759b',
  youtube: '#bb0000'
};

var SocialIcon = function SocialIcon(props) {
  var activityIndicatorStyle = props.activityIndicatorStyle,
      button = props.button,
      disabled = props.disabled,
      fontFamily = props.fontFamily,
      fontStyle = props.fontStyle,
      fontWeight = props.fontWeight,
      iconColor = props.iconColor,
      iconSize = props.iconSize,
      iconStyle = props.iconStyle,
      light = props.light,
      loading = props.loading,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _props$Component = props.Component,
      Component = _props$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View : _props$Component,
      raised = props.raised,
      small = props.small,
      style = props.style,
      title = props.title,
      type = props.type,
      underlayColor = props.underlayColor,
      attributes = (0, _objectWithoutProperties2.default)(props, ["activityIndicatorStyle", "button", "disabled", "fontFamily", "fontStyle", "fontWeight", "iconColor", "iconSize", "iconStyle", "light", "loading", "onLongPress", "onPress", "Component", "raised", "small", "style", "title", "type", "underlayColor"]);
  return _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    underlayColor: light ? 'white' : underlayColor || colors[type],
    onLongPress: disabled ? null : onLongPress,
    onPress: disabled ? null : onPress,
    disabled: disabled,
    style: _reactNative.StyleSheet.flatten([raised && styles.raised, styles.container, button && styles.button, !button && raised && styles.icon, !button && !light && !raised && {
      width: iconSize * 2 + 4,
      height: iconSize * 2 + 4,
      borderRadius: iconSize * 2
    }, {
      backgroundColor: colors[type]
    }, light && {
      backgroundColor: 'white'
    }, style && style])
  }), _react.default.createElement(_reactNative.View, {
    style: styles.wrapper
  }, _react.default.createElement(_FontAwesome.default, {
    style: _reactNative.StyleSheet.flatten([iconStyle && iconStyle]),
    color: light ? colors[type] : iconColor,
    name: type,
    size: iconSize
  }), button && title && _react.default.createElement(_Text.default, {
    style: _reactNative.StyleSheet.flatten([styles.title, light && {
      color: colors[type]
    }, fontFamily && {
      fontFamily: fontFamily
    }, fontWeight && {
      fontWeight: fontWeight
    }, fontStyle && fontStyle])
  }, title), loading && _react.default.createElement(_reactNative.ActivityIndicator, {
    animating: true,
    style: _reactNative.StyleSheet.flatten([styles.activityIndicatorStyle, activityIndicatorStyle]),
    color: iconColor || 'white',
    size: small && 'small' || 'large'
  })));
};

exports.SocialIcon = SocialIcon;
SocialIcon.propTypes = {
  Component: _propTypes.default.elementType,
  type: _propTypes.default.string,
  button: _propTypes.default.bool,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  iconStyle: _config.ViewPropTypes.style,
  style: _config.ViewPropTypes.style,
  iconColor: _propTypes.default.string,
  underlayColor: _propTypes.default.string,
  title: _propTypes.default.string,
  raised: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  activityIndicatorStyle: _config.ViewPropTypes.style,
  small: _propTypes.default.string,
  iconSize: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  light: _propTypes.default.bool,
  fontWeight: _propTypes.default.string,
  fontStyle: _reactNative.Text.propTypes.style,
  fontFamily: _propTypes.default.string
};
SocialIcon.defaultProps = {
  raised: true,
  iconColor: 'white',
  iconSize: 24,
  button: false
};

var styles = _reactNative.StyleSheet.create({
  container: {
    margin: 7,
    borderRadius: 30,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    paddingTop: 14,
    paddingBottom: 14
  },
  raised: _objectSpread({}, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  wrapper: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  title: _objectSpread({
    color: 'white',
    marginLeft: 15
  }, _reactNative.Platform.select({
    android: _objectSpread({}, _fonts.default.android.black),
    default: {
      fontWeight: 'bold'
    }
  })),
  icon: {
    height: 52,
    width: 52
  },
  activityIndicatorStyle: {
    marginHorizontal: 10,
    height: 0
  }
});

var _default = (0, _config.withTheme)(SocialIcon, 'SocialIcon');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,