4803be28ad066b31f8b5948f3e1ef93f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _normalizeText = _interopRequireDefault(require("../helpers/normalizeText"));

var _config = require("../config");

var _Text = _interopRequireDefault(require("../text/Text"));

var _Divider = _interopRequireDefault(require("../divider/Divider"));

var _Image = _interopRequireDefault(require("../image/Image"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Card = function Card(props) {
  var children = props.children,
      containerStyle = props.containerStyle,
      wrapperStyle = props.wrapperStyle,
      imageWrapperStyle = props.imageWrapperStyle,
      title = props.title,
      titleStyle = props.titleStyle,
      titleNumberOfLines = props.titleNumberOfLines,
      featuredTitle = props.featuredTitle,
      featuredTitleStyle = props.featuredTitleStyle,
      featuredSubtitle = props.featuredSubtitle,
      featuredSubtitleStyle = props.featuredSubtitleStyle,
      dividerStyle = props.dividerStyle,
      image = props.image,
      imageStyle = props.imageStyle,
      imageProps = props.imageProps,
      theme = props.theme,
      attributes = (0, _objectWithoutProperties2.default)(props, ["children", "containerStyle", "wrapperStyle", "imageWrapperStyle", "title", "titleStyle", "titleNumberOfLines", "featuredTitle", "featuredTitleStyle", "featuredSubtitle", "featuredSubtitleStyle", "dividerStyle", "image", "imageStyle", "imageProps", "theme"]);
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container(theme), image && {
      padding: 0
    }, containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, title === '' || _react.default.isValidElement(title) ? title : title && title.length && _react.default.createElement(_reactNative.View, null, _react.default.createElement(_Text.default, {
    testID: "cardTitle",
    style: _reactNative.StyleSheet.flatten([styles.cardTitle(theme), image && styles.imageCardTitle, titleStyle && titleStyle]),
    numberOfLines: titleNumberOfLines
  }, title), !image && _react.default.createElement(_Divider.default, {
    style: _reactNative.StyleSheet.flatten([styles.divider, dividerStyle && dividerStyle])
  })), image && _react.default.createElement(_reactNative.View, {
    style: imageWrapperStyle && imageWrapperStyle
  }, _react.default.createElement(_Image.default, (0, _extends2.default)({
    style: [{
      width: null,
      height: 150
    }, imageStyle && imageStyle],
    source: image
  }, imageProps), (featuredTitle || featuredSubtitle) && _react.default.createElement(_reactNative.View, {
    style: styles.overlayContainer
  }, featuredTitle && _react.default.createElement(_Text.default, {
    style: _reactNative.StyleSheet.flatten([styles.featuredTitle, featuredTitleStyle && featuredTitleStyle])
  }, featuredTitle), featuredSubtitle && _react.default.createElement(_Text.default, {
    style: _reactNative.StyleSheet.flatten([styles.featuredSubtitle, featuredSubtitleStyle && featuredSubtitleStyle])
  }, featuredSubtitle))), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([{
      padding: 10
    }, wrapperStyle && wrapperStyle])
  }, children)), !image && children));
};

exports.Card = Card;
Card.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.arrayOf(_propTypes.default.element)]),
  containerStyle: _config.ViewPropTypes.style,
  wrapperStyle: _config.ViewPropTypes.style,
  overlayStyle: _config.ViewPropTypes.style,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  titleStyle: _config.TextPropTypes.style,
  featuredTitle: _propTypes.default.string,
  featuredTitleStyle: _config.TextPropTypes.style,
  featuredSubtitle: _propTypes.default.string,
  featuredSubtitleStyle: _config.TextPropTypes.style,
  dividerStyle: _config.ViewPropTypes.style,
  image: _reactNative.Image.propTypes.source,
  imageStyle: _config.ViewPropTypes.style,
  imageWrapperStyle: _config.ViewPropTypes.style,
  imageProps: _propTypes.default.object,
  titleNumberOfLines: _propTypes.default.number,
  theme: _propTypes.default.object
};
var styles = {
  container: function container(theme) {
    return _objectSpread({
      backgroundColor: 'white',
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: theme.colors.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    }));
  },
  featuredTitle: _objectSpread({
    fontSize: (0, _normalizeText.default)(18),
    marginBottom: 8,
    color: 'white'
  }, _reactNative.Platform.select({
    android: _objectSpread({}, _config.fonts.android.black),
    default: {
      fontWeight: '800'
    }
  })),
  featuredSubtitle: _objectSpread({
    fontSize: (0, _normalizeText.default)(13),
    marginBottom: 8,
    color: 'white'
  }, _reactNative.Platform.select({
    android: _objectSpread({}, _config.fonts.android.black),
    default: {
      fontWeight: '400'
    }
  })),
  wrapper: {
    backgroundColor: 'transparent'
  },
  divider: {
    marginBottom: 15
  },
  cardTitle: function cardTitle(theme) {
    return _objectSpread({
      fontSize: (0, _normalizeText.default)(14),
      color: theme.colors.grey1
    }, _reactNative.Platform.select({
      android: _objectSpread({}, _config.fonts.android.black),
      default: {
        fontWeight: 'bold'
      }
    }), {
      textAlign: 'center',
      marginBottom: 15
    });
  },
  imageCardTitle: {
    marginTop: 15
  },
  overlayContainer: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    alignSelf: 'stretch',
    justifyContent: 'center',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
};

var _default = (0, _config.withTheme)(Card, 'Card');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmQuanMiXSwibmFtZXMiOlsiQ2FyZCIsInByb3BzIiwiY2hpbGRyZW4iLCJjb250YWluZXJTdHlsZSIsIndyYXBwZXJTdHlsZSIsImltYWdlV3JhcHBlclN0eWxlIiwidGl0bGUiLCJ0aXRsZVN0eWxlIiwidGl0bGVOdW1iZXJPZkxpbmVzIiwiZmVhdHVyZWRUaXRsZSIsImZlYXR1cmVkVGl0bGVTdHlsZSIsImZlYXR1cmVkU3VidGl0bGUiLCJmZWF0dXJlZFN1YnRpdGxlU3R5bGUiLCJkaXZpZGVyU3R5bGUiLCJpbWFnZSIsImltYWdlU3R5bGUiLCJpbWFnZVByb3BzIiwidGhlbWUiLCJhdHRyaWJ1dGVzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJjb250YWluZXIiLCJwYWRkaW5nIiwid3JhcHBlciIsIlJlYWN0IiwiaXNWYWxpZEVsZW1lbnQiLCJsZW5ndGgiLCJjYXJkVGl0bGUiLCJpbWFnZUNhcmRUaXRsZSIsImRpdmlkZXIiLCJ3aWR0aCIsImhlaWdodCIsIm92ZXJsYXlDb250YWluZXIiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJlbGVtZW50IiwiYXJyYXlPZiIsIlZpZXdQcm9wVHlwZXMiLCJzdHlsZSIsIm92ZXJsYXlTdHlsZSIsInN0cmluZyIsIlRleHRQcm9wVHlwZXMiLCJJbWFnZU5hdGl2ZSIsInNvdXJjZSIsIm9iamVjdCIsIm51bWJlciIsImJhY2tncm91bmRDb2xvciIsImJvcmRlcldpZHRoIiwibWFyZ2luIiwibWFyZ2luQm90dG9tIiwiYm9yZGVyQ29sb3IiLCJjb2xvcnMiLCJncmV5NSIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImRlZmF1bHQiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJmb250U2l6ZSIsImNvbG9yIiwiZm9udHMiLCJibGFjayIsImZvbnRXZWlnaHQiLCJncmV5MSIsInRleHRBbGlnbiIsIm1hcmdpblRvcCIsImZsZXgiLCJhbGlnbkl0ZW1zIiwiYWxpZ25TZWxmIiwianVzdGlmeUNvbnRlbnQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBQyxLQUFLLEVBQUk7QUFBQSxNQUVsQkMsUUFGa0IsR0FtQmhCRCxLQW5CZ0IsQ0FFbEJDLFFBRmtCO0FBQUEsTUFHbEJDLGNBSGtCLEdBbUJoQkYsS0FuQmdCLENBR2xCRSxjQUhrQjtBQUFBLE1BSWxCQyxZQUprQixHQW1CaEJILEtBbkJnQixDQUlsQkcsWUFKa0I7QUFBQSxNQUtsQkMsaUJBTGtCLEdBbUJoQkosS0FuQmdCLENBS2xCSSxpQkFMa0I7QUFBQSxNQU1sQkMsS0FOa0IsR0FtQmhCTCxLQW5CZ0IsQ0FNbEJLLEtBTmtCO0FBQUEsTUFPbEJDLFVBUGtCLEdBbUJoQk4sS0FuQmdCLENBT2xCTSxVQVBrQjtBQUFBLE1BUWxCQyxrQkFSa0IsR0FtQmhCUCxLQW5CZ0IsQ0FRbEJPLGtCQVJrQjtBQUFBLE1BU2xCQyxhQVRrQixHQW1CaEJSLEtBbkJnQixDQVNsQlEsYUFUa0I7QUFBQSxNQVVsQkMsa0JBVmtCLEdBbUJoQlQsS0FuQmdCLENBVWxCUyxrQkFWa0I7QUFBQSxNQVdsQkMsZ0JBWGtCLEdBbUJoQlYsS0FuQmdCLENBV2xCVSxnQkFYa0I7QUFBQSxNQVlsQkMscUJBWmtCLEdBbUJoQlgsS0FuQmdCLENBWWxCVyxxQkFaa0I7QUFBQSxNQWFsQkMsWUFia0IsR0FtQmhCWixLQW5CZ0IsQ0FhbEJZLFlBYmtCO0FBQUEsTUFjbEJDLEtBZGtCLEdBbUJoQmIsS0FuQmdCLENBY2xCYSxLQWRrQjtBQUFBLE1BZWxCQyxVQWZrQixHQW1CaEJkLEtBbkJnQixDQWVsQmMsVUFma0I7QUFB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RTtBQVZRO0FBckVMLENBQWY7O2VBb0ZlLHVCQUFVaEYsSUFBVixFQUFnQixNQUFoQixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBWaWV3LCBQbGF0Zm9ybSwgSW1hZ2UgYXMgSW1hZ2VOYXRpdmUsIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgbm9ybWFsaXplIGZyb20gJy4uL2hlbHBlcnMvbm9ybWFsaXplVGV4dCc7XG5pbXBvcnQgeyBmb250cywgVGV4dFByb3BUeXBlcywgVmlld1Byb3BUeXBlcywgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcblxuaW1wb3J0IFRleHQgZnJvbSAnLi4vdGV4dC9UZXh0JztcbmltcG9ydCBEaXZpZGVyIGZyb20gJy4uL2RpdmlkZXIvRGl2aWRlcic7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vaW1hZ2UvSW1hZ2UnO1xuXG5jb25zdCBDYXJkID0gcHJvcHMgPT4ge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY29udGFpbmVyU3R5bGUsXG4gICAgd3JhcHBlclN0eWxlLFxuICAgIGltYWdlV3JhcHBlclN0eWxlLFxuICAgIHRpdGxlLFxuICAgIHRpdGxlU3R5bGUsXG4gICAgdGl0bGVOdW1iZXJPZkxpbmVzLFxuICAgIGZlYXR1cmVkVGl0bGUsXG4gICAgZmVhdHVyZWRUaXRsZVN0eWxlLFxuICAgIGZlYXR1cmVkU3VidGl0bGUsXG4gICAgZmVhdHVyZWRTdWJ0aXRsZVN0eWxlLFxuICAgIGRpdmlkZXJTdHlsZSxcbiAgICBpbWFnZSxcbiAgICBpbWFnZVN0eWxlLFxuICAgIGltYWdlUHJvcHMsXG4gICAgdGhlbWUsXG4gICAgLi4uYXR0cmlidXRlc1xuICB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgey4uLmF0dHJpYnV0ZXN9XG4gICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcih0aGVtZSksXG4gICAgICAgIGltYWdlICYmIHsgcGFkZGluZzogMCB9LFxuICAgICAgICBjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZSxcbiAgICAgIF0pfVxuICAgID5cbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgIHN0eWxlcy53cmFwcGVyLFxuICAgICAgICAgIHdyYXBwZXJTdHlsZSAmJiB3cmFwcGVyU3R5bGUsXG4gICAgICAgIF0pfVxuICAgICAgPlxuICAgICAgICB7dGl0bGUgPT09ICcnIHx8IFJlYWN0LmlzVmFsaWRFbGVtZW50KHRpdGxlKVxuICAgICAgICAgID8gdGl0bGVcbiAgICAgICAgICA6IHRpdGxlICYmXG4gICAgICAgICAgICB0aXRsZS5sZW5ndGggJiYgKFxuICAgICAgICAgICAgICA8Vmlldz5cbiAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgdGVzdElEPVwiY2FyZFRpdGxlXCJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuY2FyZFRpdGxlKHRoZW1lKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgJiYgc3R5bGVzLmltYWdlQ2FyZFRpdGxlLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZVN0eWxlICYmIHRpdGxlU3R5bGUsXG4gICAgICAgICAgICAgICAgICBdKX1cbiAgICAgICAgICAgICAgICAgIG51bWJlck9mTGluZXM9e3RpdGxlTnVtYmVyT2ZMaW5lc31cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgICAgICAgeyFpbWFnZSAmJiAoXG4gICAgICAgICAgICAgICAgICA8RGl2aWRlclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZXMuZGl2aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICBkaXZpZGVyU3R5bGUgJiYgZGl2aWRlclN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBdKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgKX1cblxuICAgICAgICB7aW1hZ2UgJiYgKFxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtpbWFnZVdyYXBwZXJTdHlsZSAmJiBpbWFnZVdyYXBwZXJTdHlsZX0+XG4gICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgc3R5bGU9e1t7IHdpZHRoOiBudWxsLCBoZWlnaHQ6IDE1MCB9LCBpbWFnZVN0eWxlICYmIGltYWdlU3R5bGVdfVxuICAgICAgICAgICAgICBzb3VyY2U9e2ltYWdlfVxuICAgICAgICAgICAgICB7Li4uaW1hZ2VQcm9wc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgeyhmZWF0dXJlZFRpdGxlIHx8IGZlYXR1cmVkU3VidGl0bGUpICYmIChcbiAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm92ZXJsYXlDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAge2ZlYXR1cmVkVGl0bGUgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmZlYXR1cmVkVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlZFRpdGxlU3R5bGUgJiYgZmVhdHVyZWRUaXRsZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgIF0pfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge2ZlYXR1cmVkVGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICB7ZmVhdHVyZWRTdWJ0aXRsZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXMuZmVhdHVyZWRTdWJ0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVkU3VidGl0bGVTdHlsZSAmJiBmZWF0dXJlZFN1YnRpdGxlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgXSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7ZmVhdHVyZWRTdWJ0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0ltYWdlPlxuXG4gICAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgICAgICB7IHBhZGRpbmc6IDEwIH0sXG4gICAgICAgICAgICAgICAgd3JhcHBlclN0eWxlICYmIHdyYXBwZXJTdHlsZSxcbiAgICAgICAgICAgICAgXSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICl9XG5cbiAgICAgICAgeyFpbWFnZSAmJiBjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5DYXJkLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5lbGVtZW50LFxuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5lbGVtZW50KSxcbiAgXSksXG4gIGNvbnRhaW5lclN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICB3cmFwcGVyU3R5bGU6IFZpZXdQcm9wVHlwZXMuc3R5bGUsXG4gIG92ZXJsYXlTdHlsZTogVmlld1Byb3BUeXBlcy5zdHlsZSxcbiAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5lbGVtZW50XSksXG4gIHRpdGxlU3R5bGU6IFRleHRQcm9wVHlwZXMuc3R5bGUsXG4gIGZlYXR1cmVkVGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZlYXR1cmVkVGl0bGVTdHlsZTogVGV4dFByb3BUeXBlcy5zdHlsZSxcbiAgZmVhdHVyZWRTdWJ0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmVhdHVyZWRTdWJ0aXRsZVN0eWxlOiBUZXh0UHJvcFR5cGVzLnN0eWxlLFxuICBkaXZpZGVyU3R5bGU6IFZpZXdQcm9wVHlwZXMuc3R5bGUsXG4gIGltYWdlOiBJbWFnZU5hdGl2ZS5wcm9wVHlwZXMuc291cmNlLFxuICBpbWFnZVN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICBpbWFnZVdyYXBwZXJTdHlsZTogVmlld1Byb3BUeXBlcy5zdHlsZSxcbiAgaW1hZ2VQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgdGl0bGVOdW1iZXJPZkxpbmVzOiBQcm9wVHlwZXMubnVtYmVyLFxuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB0aGVtZSA9PiAoe1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBwYWRkaW5nOiAxNSxcbiAgICBtYXJnaW46IDE1LFxuICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLmdyZXk1LFxuICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLDAsMCwgLjIpJyxcbiAgICAgICAgc2hhZG93T2Zmc2V0OiB7IGhlaWdodDogMCwgd2lkdGg6IDAgfSxcbiAgICAgICAgc2hhZG93T3BhY2l0eTogMSxcbiAgICAgICAgc2hhZG93UmFkaXVzOiAxLFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSksXG4gIGZlYXR1cmVkVGl0bGU6IHtcbiAgICBmb250U2l6ZTogbm9ybWFsaXplKDE4KSxcbiAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgLi4uZm9udHMuYW5kcm9pZC5ibGFjayxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6ICc4MDAnLFxuICAgICAgfSxcbiAgICB9KSxcbiAgfSxcbiAgZmVhdHVyZWRTdWJ0aXRsZToge1xuICAgIGZvbnRTaXplOiBub3JtYWxpemUoMTMpLFxuICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgYW5kcm9pZDoge1xuICAgICAgICAuLi5mb250cy5hbmRyb2lkLmJsYWNrLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgZm9udFdlaWdodDogJzQwMCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICB3cmFwcGVyOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICB9LFxuICBkaXZpZGVyOiB7XG4gICAgbWFyZ2luQm90dG9tOiAxNSxcbiAgfSxcbiAgY2FyZFRpdGxlOiB0aGVtZSA9PiAoe1xuICAgIGZvbnRTaXplOiBub3JtYWxpemUoMTQpLFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZ3JleTEsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgLi4uZm9udHMuYW5kcm9pZC5ibGFjayxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBtYXJnaW5Cb3R0b206IDE1LFxuICB9KSxcbiAgaW1hZ2VDYXJkVGl0bGU6IHtcbiAgICBtYXJnaW5Ub3A6IDE1LFxuICB9LFxuICBvdmVybGF5Q29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMiknLFxuICAgIGFsaWduU2VsZjogJ3N0cmV0Y2gnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gIH0sXG59O1xuXG5leHBvcnQgeyBDYXJkIH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2FyZCwgJ0NhcmQnKTtcbiJdfQ==