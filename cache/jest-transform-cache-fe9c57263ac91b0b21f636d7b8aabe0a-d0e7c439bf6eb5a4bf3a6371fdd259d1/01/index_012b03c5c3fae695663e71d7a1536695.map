{"version":3,"sources":["index.js"],"names":["OutlinedTextField","props","onTextLayout","bind","state","labelWidth","Animated","Value","lines","nativeEvent","fontSize","labelFontSize","scale","setValue","width","TextField","contentInset","input","top","left","right","labelOffset","y0","y1","defaultProps","lineWidth","disabledLineWidth","StyleSheet","hairlineWidth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;IAEqBA,iB;;;AAyBnB,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,uHAAMA,KAAN;AAEA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,6CAApB;AACA,UAAKC,KAAL,CAAWC,UAAX,GAAwB,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAxB;AAJiB;AAKlB;;;;uCAEwC;AAAA,UAAXC,KAAW,QAA1BC,WAA0B,CAAXD,KAAW;AAAA,wBACL,KAAKP,KADA;AAAA,UACjCS,QADiC,eACjCA,QADiC;AAAA,UACvBC,aADuB,eACvBA,aADuB;AAAA,UAEjCN,UAFiC,GAElB,KAAKD,KAFa,CAEjCC,UAFiC;AAIvC,UAAIO,KAAK,GAAGD,aAAa,GAAGD,QAA5B;AAEAL,MAAAA,UAAU,CAACQ,QAAX,CAAoBL,KAAK,CAAC,CAAD,CAAL,CAASM,KAAT,GAAiBF,KAArC;AACD;;;gCAEWX,K,EAAO;AAAA,UACXC,YADW,GACM,IADN,CACXA,YADW;AAGjB,8IAA8BD,KAA9B;AAAqCC,QAAAA,YAAY,EAAZA;AAArC;AACD;;;+BAEUD,K,EAAO;AAAA,UACVI,UADU,GACK,KAAKD,KADV,CACVC,UADU;AAGhB,aACE,6BAAC,gBAAD,6BAAaJ,KAAb;AAAoB,QAAA,UAAU,EAAEI;AAAhC,SADF;AAGD;;;EArD4CU,c;;;AAA1Bf,iB,CACZgB,Y,qBACFD,eAAUC,Y;AAEbC,EAAAA,KAAK,EAAE,E;AAEPC,EAAAA,GAAG,EAAE,C;AACLC,EAAAA,IAAI,EAAE,E;AACNC,EAAAA,KAAK,EAAE;;AARUpB,iB,CAWZqB,W,qBACFN,eAAUM,W;AAEbC,EAAAA,EAAE,EAAE,C;AACJC,EAAAA,EAAE,EAAE,CAAC;;AAfYvB,iB,CAkBZwB,Y,qBACFT,eAAUS,Y;AAEbC,EAAAA,SAAS,EAAE,C;AACXC,EAAAA,iBAAiB,EAAEC,wBAAWC","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport TextField from '../field';\nimport Outline from '../outline';\n\nexport default class OutlinedTextField extends TextField {\n  static contentInset = {\n    ...TextField.contentInset,\n\n    input: 16,\n\n    top: 0,\n    left: 12,\n    right: 12,\n  };\n\n  static labelOffset = {\n    ...TextField.labelOffset,\n\n    y0: 0,\n    y1: -10,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n\n    lineWidth: 1,\n    disabledLineWidth: StyleSheet.hairlineWidth,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onTextLayout = this.onTextLayout.bind(this);\n    this.state.labelWidth = new Animated.Value(0);\n  }\n\n  onTextLayout({ nativeEvent: { lines } }) {\n    let { fontSize, labelFontSize } = this.props;\n    let { labelWidth } = this.state;\n\n    let scale = labelFontSize / fontSize;\n\n    labelWidth.setValue(lines[0].width * scale);\n  }\n\n  renderLabel(props) {\n    let { onTextLayout } = this;\n\n    return super.renderLabel({ ...props, onTextLayout });\n  }\n\n  renderLine(props) {\n    let { labelWidth } = this.state;\n\n    return (\n      <Outline {...props} labelWidth={labelWidth} />\n    );\n  }\n}\n"]}