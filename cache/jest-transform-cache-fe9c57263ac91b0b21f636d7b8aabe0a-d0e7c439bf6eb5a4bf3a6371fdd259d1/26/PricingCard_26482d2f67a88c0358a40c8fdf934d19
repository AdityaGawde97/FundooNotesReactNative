8223b81444e7fdb108869fa7ed52c355
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PricingCard = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _helpers = require("../helpers");

var _config = require("../config");

var _Text = _interopRequireDefault(require("../text/Text"));

var _Button = _interopRequireDefault(require("../buttons/Button"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PricingCard = function PricingCard(props) {
  var theme = props.theme,
      rest = (0, _objectWithoutProperties2.default)(props, ["theme"]);
  var containerStyle = rest.containerStyle,
      wrapperStyle = rest.wrapperStyle,
      title = rest.title,
      price = rest.price,
      info = rest.info,
      button = rest.button,
      _rest$color = rest.color,
      color = _rest$color === void 0 ? theme.colors.primary : _rest$color,
      titleStyle = rest.titleStyle,
      pricingStyle = rest.pricingStyle,
      infoStyle = rest.infoStyle,
      onButtonPress = rest.onButtonPress,
      attributes = (0, _objectWithoutProperties2.default)(rest, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleStyle", "pricingStyle", "infoStyle", "onButtonPress"]);
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container(theme), containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, _react.default.createElement(_Text.default, {
    testID: "pricingCardTitle",
    style: _reactNative.StyleSheet.flatten([styles.pricingTitle, titleStyle, {
      color: color
    }])
  }, title), _react.default.createElement(_Text.default, {
    style: _reactNative.StyleSheet.flatten([styles.pricingPrice, pricingStyle])
  }, price), info.map(function (item) {
    return _react.default.createElement(_Text.default, {
      key: item,
      style: _reactNative.StyleSheet.flatten([styles.pricingInfo(theme), infoStyle])
    }, item);
  }), _react.default.createElement(_Button.default, {
    title: button.title,
    buttonStyle: _reactNative.StyleSheet.flatten([styles.button, button.buttonStyle, {
      backgroundColor: color
    }]),
    titleStyle: button.titleStyle,
    onPress: onButtonPress,
    icon: _react.default.createElement(_Icon.default, {
      name: button.icon,
      size: 15,
      color: "white"
    })
  })));
};

exports.PricingCard = PricingCard;
PricingCard.propTypes = {
  containerStyle: _config.ViewPropTypes.style,
  wrapperStyle: _config.ViewPropTypes.style,
  title: _propTypes.default.string,
  price: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  info: _propTypes.default.arrayOf(_propTypes.default.string),
  button: _propTypes.default.object,
  color: _propTypes.default.string,
  onButtonPress: _propTypes.default.func,
  titleStyle: _reactNative.Text.propTypes.style,
  pricingStyle: _reactNative.Text.propTypes.style,
  infoStyle: _reactNative.Text.propTypes.style,
  theme: _propTypes.default.object
};
PricingCard.defaultProps = {
  info: []
};
var styles = {
  container: function container(theme) {
    return _objectSpread({
      margin: 15,
      marginBottom: 15,
      backgroundColor: 'white',
      borderWidth: 1,
      padding: 15,
      borderColor: theme.colors.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      }
    }));
  },
  wrapper: {
    backgroundColor: 'transparent'
  },
  pricingTitle: _objectSpread({
    textAlign: 'center',
    fontSize: (0, _helpers.normalizeText)(30)
  }, _reactNative.Platform.select({
    android: _objectSpread({}, _config.fonts.android.black),
    default: {
      fontWeight: '800'
    }
  })),
  pricingPrice: _objectSpread({
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 10,
    fontSize: (0, _helpers.normalizeText)(40)
  }, _reactNative.Platform.select({
    android: _objectSpread({}, _config.fonts.android.bold),
    default: {
      fontWeight: '700'
    }
  })),
  pricingInfo: function pricingInfo(theme) {
    return _objectSpread({
      textAlign: 'center',
      marginTop: 5,
      marginBottom: 5,
      color: theme.colors.grey3
    }, _reactNative.Platform.select({
      android: _objectSpread({}, _config.fonts.android.bold),
      default: {
        fontWeight: '600'
      }
    }));
  },
  button: {
    marginTop: 15,
    marginBottom: 10
  }
};

var _default = (0, _config.withTheme)(PricingCard, 'PricingCard');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,