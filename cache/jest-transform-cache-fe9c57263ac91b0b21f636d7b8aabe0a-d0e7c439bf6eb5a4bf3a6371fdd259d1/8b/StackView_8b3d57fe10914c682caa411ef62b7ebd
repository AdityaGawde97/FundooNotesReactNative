b0af399027ef2aa36689301f81aef19c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _reactNavigation = require("react-navigation");

var _CardStack = _interopRequireDefault(require("./CardStack"));

var _KeyboardManager = _interopRequireDefault(require("../KeyboardManager"));

var _HeaderContainer = _interopRequireDefault(require("../Header/HeaderContainer"));

var _SafeAreaProviderCompat = _interopRequireDefault(require("../SafeAreaProviderCompat"));

var _jsxFileName = "/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/StackView.tsx";

var StackView = function (_React$Component) {
  (0, _inherits2.default)(StackView, _React$Component);

  function StackView() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, StackView);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      routes: [],
      previousRoutes: [],
      previousDescriptors: {},
      openingRouteKeys: [],
      closingRouteKeys: [],
      replacingRouteKeys: [],
      descriptors: {}
    };

    _this.getGesturesEnabled = function (_ref) {
      var route = _ref.route;
      var descriptor = _this.state.descriptors[route.key];

      if (descriptor) {
        var _descriptor$options = descriptor.options,
            gestureEnabled = _descriptor$options.gestureEnabled,
            animationEnabled = _descriptor$options.animationEnabled;

        if (animationEnabled === false) {
          return false;
        }

        return gestureEnabled !== undefined ? gestureEnabled : _reactNative.Platform.OS !== 'android';
      }

      return false;
    };

    _this.getPreviousRoute = function (_ref2) {
      var route = _ref2.route;
      var _this$state = _this.state,
          closingRouteKeys = _this$state.closingRouteKeys,
          replacingRouteKeys = _this$state.replacingRouteKeys;

      var routes = _this.state.routes.filter(function (r) {
        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);
      });

      var index = routes.findIndex(function (r) {
        return r.key === route.key;
      });
      return routes[index - 1];
    };

    _this.renderScene = function (_ref3) {
      var route = _ref3.route;
      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];

      if (!descriptor) {
        return null;
      }

      var navigation = descriptor.navigation,
          getComponent = descriptor.getComponent;
      var SceneComponent = getComponent();
      return React.createElement(_reactNavigation.SceneView, {
        screenProps: _this.props.screenProps,
        navigation: navigation,
        component: SceneComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 269
        }
      });
    };

    _this.renderHeader = function (props) {
      return React.createElement(_HeaderContainer.default, (0, _extends2.default)({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 278
        }
      }));
    };

    _this.handleTransitionComplete = function (_ref4) {
      var route = _ref4.route;

      _this.props.navigation.dispatch(_reactNavigation.StackActions.completeTransition({
        toChildKey: route.key
      }));
    };

    _this.handleOpenRoute = function (_ref5) {
      var route = _ref5.route;

      _this.handleTransitionComplete({
        route: route
      });

      _this.setState(function (state) {
        return {
          routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {
            return !state.replacingRouteKeys.includes(r.key);
          }) : state.routes,
          openingRouteKeys: state.openingRouteKeys.filter(function (key) {
            return key !== route.key;
          }),
          closingRouteKeys: state.closingRouteKeys.filter(function (key) {
            return key !== route.key;
          }),
          replacingRouteKeys: []
        };
      });
    };

    _this.handleCloseRoute = function (_ref6) {
      var route = _ref6.route;
      var _this$props = _this.props,
          state = _this$props.state,
          navigation = _this$props.navigation;

      if (state.routes.find(function (r) {
        return r.key === route.key;
      })) {
        navigation.dispatch(_reactNavigation.StackActions.pop({
          key: route.key
        }));
      } else {
        var index = _this.state.routes.findIndex(function (r) {
          return r.key === route.key;
        });

        _this.handleTransitionComplete({
          route: _this.state.routes[Math.max(index - 1, 0)]
        });
      }

      _this.setState(function (state) {
        return {
          routes: state.routes.filter(function (r) {
            return r.key !== route.key;
          }),
          openingRouteKeys: state.openingRouteKeys.filter(function (key) {
            return key !== route.key;
          }),
          closingRouteKeys: state.closingRouteKeys.filter(function (key) {
            return key !== route.key;
          })
        };
      });
    };

    _this.handleTransitionStart = function (_ref7, closing) {
      var route = _ref7.route;
      var descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];
      descriptor && descriptor.options.onTransitionStart && descriptor.options.onTransitionStart({
        closing: closing
      });
    };

    _this.handleTransitionEnd = function (_ref8, closing) {
      var route = _ref8.route;
      var descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];
      descriptor && descriptor.options.onTransitionEnd && descriptor.options.onTransitionEnd({
        closing: closing
      });
    };

    return _this;
  }

  (0, _createClass2.default)(StackView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          state = _this$props2.state,
          navigation = _this$props2.navigation,
          keyboardHandlingEnabled = _this$props2.keyboardHandlingEnabled,
          _this$props2$mode = _this$props2.mode,
          mode = _this$props2$mode === void 0 ? 'card' : _this$props2$mode,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, ["state", "navigation", "keyboardHandlingEnabled", "mode"]);
      var _this$state2 = this.state,
          routes = _this$state2.routes,
          descriptors = _this$state2.descriptors,
          openingRouteKeys = _this$state2.openingRouteKeys,
          closingRouteKeys = _this$state2.closingRouteKeys;
      var headerMode = mode !== 'modal' && _reactNative.Platform.OS === 'ios' ? 'float' : 'screen';
      return React.createElement(_SafeAreaProviderCompat.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 372
        }
      }, React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 373
        }
      }, function (insets) {
        return React.createElement(_KeyboardManager.default, {
          enabled: keyboardHandlingEnabled !== false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 375
          }
        }, function (props) {
          return React.createElement(_CardStack.default, (0, _extends2.default)({
            mode: mode,
            insets: insets,
            getPreviousRoute: _this2.getPreviousRoute,
            getGesturesEnabled: _this2.getGesturesEnabled,
            routes: routes,
            openingRouteKeys: openingRouteKeys,
            closingRouteKeys: closingRouteKeys,
            onOpenRoute: _this2.handleOpenRoute,
            onCloseRoute: _this2.handleCloseRoute,
            onTransitionStart: _this2.handleTransitionStart,
            onTransitionEnd: _this2.handleTransitionEnd,
            renderHeader: _this2.renderHeader,
            renderScene: _this2.renderScene,
            headerMode: headerMode,
            state: state,
            descriptors: descriptors
          }, rest, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 377
            }
          }));
        });
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.state.routes === state.previousRoutes && state.routes.length) {
        if (props.descriptors !== state.previousDescriptors) {
          var _descriptors = state.routes.reduce(function (acc, route) {
            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
            return acc;
          }, {});

          return {
            previousDescriptors: props.descriptors,
            descriptors: _descriptors
          };
        }

        return null;
      }

      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;
      var openingRouteKeys = state.openingRouteKeys,
          closingRouteKeys = state.closingRouteKeys,
          replacingRouteKeys = state.replacingRouteKeys,
          previousRoutes = state.previousRoutes;
      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];
      var nextFocusedRoute = routes[routes.length - 1];

      var isAnimationEnabled = function isAnimationEnabled(key) {
        var descriptor = props.descriptors[key] || state.descriptors[key];
        return descriptor ? descriptor.options.animationEnabled !== false : true;
      };

      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {
        if (!previousRoutes.find(function (r) {
          return r.key === nextFocusedRoute.key;
        })) {
          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {
            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);
            closingRouteKeys = closingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });

            if (!routes.find(function (r) {
              return r.key === previousFocusedRoute.key;
            })) {
              replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);
              openingRouteKeys = openingRouteKeys.filter(function (key) {
                return key !== previousFocusedRoute.key;
              });
              closingRouteKeys = closingRouteKeys.filter(function (key) {
                return key !== previousFocusedRoute.key;
              });
              routes = routes.slice();
              routes.splice(routes.length - 1, 0, previousFocusedRoute);
            }
          }
        } else if (!routes.find(function (r) {
          return r.key === previousFocusedRoute.key;
        })) {
          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {
            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);
            openingRouteKeys = openingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);
          }
        } else {}
      } else if (replacingRouteKeys.length || closingRouteKeys.length) {
        var _routes;

        routes = routes.slice();

        (_routes = routes).splice.apply(_routes, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref9) {
          var key = _ref9.key;
          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;
        }))));
      }

      if (!routes.length) {
        throw new Error("There should always be at least one route.");
      }

      var descriptors = routes.reduce(function (acc, route) {
        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
        return acc;
      }, {});
      return {
        routes: routes,
        previousRoutes: props.state.routes,
        previousDescriptors: props.descriptors,
        openingRouteKeys: openingRouteKeys,
        closingRouteKeys: closingRouteKeys,
        replacingRouteKeys: replacingRouteKeys,
        descriptors: descriptors
      };
    }
  }]);
  return StackView;
}(React.Component);

var _default = StackView;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,