9d6d067d5d8e7fcc89c5002c7402b99a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getDefaultHeaderHeight = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _HeaderBackButton = _interopRequireDefault(require("./HeaderBackButton"));

var _HeaderBackground = _interopRequireDefault(require("./HeaderBackground"));

var _memoize = _interopRequireDefault(require("../../utils/memoize"));

var _jsxFileName = "/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Header/HeaderSegment.tsx";

var warnIfHeaderStylesDefined = function warnIfHeaderStylesDefined(styles) {
  Object.keys(styles).forEach(function (styleProp) {
    var value = styles[styleProp];

    if (styleProp === 'position' && value === 'absolute') {
      console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' navigationOption.");
    } else if (value !== undefined) {
      console.warn(styleProp + " was given a value of " + value + ", this has no effect on headerStyle.");
    }
  });
};

var getDefaultHeaderHeight = function getDefaultHeaderHeight(layout, statusBarHeight) {
  var isLandscape = layout.width > layout.height;
  var headerHeight;

  if (_reactNative.Platform.OS === 'ios') {
    if (isLandscape && !_reactNative.Platform.isPad) {
      headerHeight = 32;
    } else {
      headerHeight = 44;
    }
  } else if (_reactNative.Platform.OS === 'android') {
    headerHeight = 56;
  } else {
    headerHeight = 64;
  }

  return headerHeight + statusBarHeight;
};

exports.getDefaultHeaderHeight = getDefaultHeaderHeight;

var HeaderSegment = function (_React$Component) {
  (0, _inherits2.default)(HeaderSegment, _React$Component);

  function HeaderSegment() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, HeaderSegment);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HeaderSegment)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {};

    _this.handleTitleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      _this.setState(function (_ref) {
        var titleLayout = _ref.titleLayout;

        if (titleLayout && height === titleLayout.height && width === titleLayout.width) {
          return null;
        }

        return {
          titleLayout: {
            height: height,
            width: width
          }
        };
      });
    };

    _this.handleLeftLabelLayout = function (e) {
      var _e$nativeEvent$layout2 = e.nativeEvent.layout,
          height = _e$nativeEvent$layout2.height,
          width = _e$nativeEvent$layout2.width;
      var leftLabelLayout = _this.state.leftLabelLayout;

      if (leftLabelLayout && height === leftLabelLayout.height && width === leftLabelLayout.width) {
        return;
      }

      _this.setState({
        leftLabelLayout: {
          height: height,
          width: width
        }
      });
    };

    _this.getInterpolatedStyle = (0, _memoize.default)(function (styleInterpolator, layout, current, next, titleLayout, leftLabelLayout) {
      return styleInterpolator({
        current: {
          progress: current
        },
        next: next && {
          progress: next
        },
        layouts: {
          screen: layout,
          title: titleLayout,
          leftLabel: leftLabelLayout
        }
      });
    });
    return _this;
  }

  (0, _createClass2.default)(HeaderSegment, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          scene = _this$props.scene,
          layout = _this$props.layout,
          insets = _this$props.insets,
          currentTitle = _this$props.title,
          previousTitle = _this$props.leftLabel,
          onGoBack = _this$props.onGoBack,
          headerTitle = _this$props.headerTitle,
          _this$props$headerTit = _this$props.headerTitleAlign,
          headerTitleAlign = _this$props$headerTit === void 0 ? _reactNative.Platform.select({
        ios: 'center',
        default: 'left'
      }) : _this$props$headerTit,
          _this$props$headerLef = _this$props.headerLeft,
          left = _this$props$headerLef === void 0 ? onGoBack ? function (props) {
        return React.createElement(_HeaderBackButton.default, (0, _extends2.default)({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 150
          }
        }));
      } : undefined : _this$props$headerLef,
          headerTransparent = _this$props.headerTransparent,
          headerTintColor = _this$props.headerTintColor,
          headerBackground = _this$props.headerBackground,
          right = _this$props.headerRight,
          backImage = _this$props.headerBackImage,
          leftLabel = _this$props.headerBackTitle,
          headerBackTitleVisible = _this$props.headerBackTitleVisible,
          truncatedLabel = _this$props.headerTruncatedBackTitle,
          pressColorAndroid = _this$props.headerPressColorAndroid,
          backAllowFontScaling = _this$props.headerBackAllowFontScaling,
          titleAllowFontScaling = _this$props.headerTitleAllowFontScaling,
          customTitleStyle = _this$props.headerTitleStyle,
          customLeftLabelStyle = _this$props.headerBackTitleStyle,
          leftContainerStyle = _this$props.headerLeftContainerStyle,
          rightContainerStyle = _this$props.headerRightContainerStyle,
          titleContainerStyle = _this$props.headerTitleContainerStyle,
          customHeaderStyle = _this$props.headerStyle,
          _this$props$headerSta = _this$props.headerStatusBarHeight,
          headerStatusBarHeight = _this$props$headerSta === void 0 ? insets.top : _this$props$headerSta,
          styleInterpolator = _this$props.styleInterpolator;
      var _this$state = this.state,
          leftLabelLayout = _this$state.leftLabelLayout,
          titleLayout = _this$state.titleLayout;

      var _this$getInterpolated = this.getInterpolatedStyle(styleInterpolator, layout, scene.progress.current, scene.progress.next, titleLayout, previousTitle ? leftLabelLayout : undefined),
          titleStyle = _this$getInterpolated.titleStyle,
          leftButtonStyle = _this$getInterpolated.leftButtonStyle,
          leftLabelStyle = _this$getInterpolated.leftLabelStyle,
          rightButtonStyle = _this$getInterpolated.rightButtonStyle,
          backgroundStyle = _this$getInterpolated.backgroundStyle;

      var _ref2 = _reactNative.StyleSheet.flatten(customHeaderStyle || {}),
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? getDefaultHeaderHeight(layout, headerStatusBarHeight) : _ref2$height,
          minHeight = _ref2.minHeight,
          maxHeight = _ref2.maxHeight,
          backgroundColor = _ref2.backgroundColor,
          borderBottomColor = _ref2.borderBottomColor,
          borderBottomEndRadius = _ref2.borderBottomEndRadius,
          borderBottomLeftRadius = _ref2.borderBottomLeftRadius,
          borderBottomRightRadius = _ref2.borderBottomRightRadius,
          borderBottomStartRadius = _ref2.borderBottomStartRadius,
          borderBottomWidth = _ref2.borderBottomWidth,
          borderColor = _ref2.borderColor,
          borderEndColor = _ref2.borderEndColor,
          borderEndWidth = _ref2.borderEndWidth,
          borderLeftColor = _ref2.borderLeftColor,
          borderLeftWidth = _ref2.borderLeftWidth,
          borderRadius = _ref2.borderRadius,
          borderRightColor = _ref2.borderRightColor,
          borderRightWidth = _ref2.borderRightWidth,
          borderStartColor = _ref2.borderStartColor,
          borderStartWidth = _ref2.borderStartWidth,
          borderStyle = _ref2.borderStyle,
          borderTopColor = _ref2.borderTopColor,
          borderTopEndRadius = _ref2.borderTopEndRadius,
          borderTopLeftRadius = _ref2.borderTopLeftRadius,
          borderTopRightRadius = _ref2.borderTopRightRadius,
          borderTopStartRadius = _ref2.borderTopStartRadius,
          borderTopWidth = _ref2.borderTopWidth,
          borderWidth = _ref2.borderWidth,
          boxShadow = _ref2.boxShadow,
          elevation = _ref2.elevation,
          shadowColor = _ref2.shadowColor,
          shadowOffset = _ref2.shadowOffset,
          shadowOpacity = _ref2.shadowOpacity,
          shadowRadius = _ref2.shadowRadius,
          opacity = _ref2.opacity,
          transform = _ref2.transform,
          unsafeStyles = (0, _objectWithoutProperties2.default)(_ref2, ["height", "minHeight", "maxHeight", "backgroundColor", "borderBottomColor", "borderBottomEndRadius", "borderBottomLeftRadius", "borderBottomRightRadius", "borderBottomStartRadius", "borderBottomWidth", "borderColor", "borderEndColor", "borderEndWidth", "borderLeftColor", "borderLeftWidth", "borderRadius", "borderRightColor", "borderRightWidth", "borderStartColor", "borderStartWidth", "borderStyle", "borderTopColor", "borderTopEndRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderTopStartRadius", "borderTopWidth", "borderWidth", "boxShadow", "elevation", "shadowColor", "shadowOffset", "shadowOpacity", "shadowRadius", "opacity", "transform"]);

      if (process.env.NODE_ENV !== 'production') {
        warnIfHeaderStylesDefined(unsafeStyles);
      }

      var safeStyles = {
        backgroundColor: backgroundColor,
        borderBottomColor: borderBottomColor,
        borderBottomEndRadius: borderBottomEndRadius,
        borderBottomLeftRadius: borderBottomLeftRadius,
        borderBottomRightRadius: borderBottomRightRadius,
        borderBottomStartRadius: borderBottomStartRadius,
        borderBottomWidth: borderBottomWidth,
        borderColor: borderColor,
        borderEndColor: borderEndColor,
        borderEndWidth: borderEndWidth,
        borderLeftColor: borderLeftColor,
        borderLeftWidth: borderLeftWidth,
        borderRadius: borderRadius,
        borderRightColor: borderRightColor,
        borderRightWidth: borderRightWidth,
        borderStartColor: borderStartColor,
        borderStartWidth: borderStartWidth,
        borderStyle: borderStyle,
        borderTopColor: borderTopColor,
        borderTopEndRadius: borderTopEndRadius,
        borderTopLeftRadius: borderTopLeftRadius,
        borderTopRightRadius: borderTopRightRadius,
        borderTopStartRadius: borderTopStartRadius,
        borderTopWidth: borderTopWidth,
        borderWidth: borderWidth,
        boxShadow: boxShadow,
        elevation: elevation,
        shadowColor: shadowColor,
        shadowOffset: shadowOffset,
        shadowOpacity: shadowOpacity,
        shadowRadius: shadowRadius,
        opacity: opacity,
        transform: transform
      };

      for (var styleProp in safeStyles) {
        if (safeStyles[styleProp] === undefined) {
          delete safeStyles[styleProp];
        }
      }

      var leftButton = left ? left({
        backImage: backImage,
        pressColorAndroid: pressColorAndroid,
        allowFontScaling: backAllowFontScaling,
        onPress: onGoBack,
        labelVisible: headerBackTitleVisible,
        label: leftLabel !== undefined ? leftLabel : previousTitle,
        truncatedLabel: truncatedLabel,
        labelStyle: [leftLabelStyle, customLeftLabelStyle],
        onLabelLayout: this.handleLeftLabelLayout,
        screenLayout: layout,
        titleLayout: titleLayout,
        tintColor: headerTintColor,
        canGoBack: Boolean(onGoBack)
      }) : null;
      return React.createElement(React.Fragment, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 303
        }
      }, React.createElement(_reactNative.Animated.View, {
        pointerEvents: "none",
        style: [_reactNative.StyleSheet.absoluteFill, backgroundStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 304
        }
      }, headerBackground ? headerBackground({
        style: safeStyles
      }) : headerTransparent ? null : React.createElement(_HeaderBackground.default, {
        style: safeStyles,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 311
        }
      })), React.createElement(_reactNative.Animated.View, {
        pointerEvents: "box-none",
        style: [{
          height: height,
          minHeight: minHeight,
          maxHeight: maxHeight,
          opacity: opacity,
          transform: transform
        }],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 314
        }
      }, React.createElement(_reactNative.View, {
        pointerEvents: "none",
        style: {
          height: headerStatusBarHeight
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 318
        }
      }), React.createElement(_reactNative.View, {
        pointerEvents: "box-none",
        style: styles.content,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 322
        }
      }, leftButton ? React.createElement(_reactNative.Animated.View, {
        pointerEvents: "box-none",
        style: [styles.left, {
          left: insets.left
        }, leftButtonStyle, leftContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 324
        }
      }, leftButton) : null, React.createElement(_reactNative.Animated.View, {
        pointerEvents: "box-none",
        style: [headerTitleAlign === 'left' ? {
          position: 'absolute',
          left: leftButton ? 72 : 16
        } : {
          marginHorizontal: 18
        }, titleStyle, titleContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 336
        }
      }, headerTitle({
        children: currentTitle,
        onLayout: this.handleTitleLayout,
        allowFontScaling: titleAllowFontScaling,
        tintColor: headerTintColor,
        style: customTitleStyle
      })), right ? React.createElement(_reactNative.Animated.View, {
        pointerEvents: "box-none",
        style: [styles.right, {
          right: insets.right
        }, rightButtonStyle, rightContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 355
        }
      }, right({
        tintColor: headerTintColor
      })) : null)));
    }
  }]);
  return HeaderSegment;
}(React.Component);

exports.default = HeaderSegment;

var styles = _reactNative.StyleSheet.create({
  content: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  left: {
    position: 'absolute',
    left: 0,
    top: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'flex-start'
  },
  right: {
    position: 'absolute',
    right: 0,
    top: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'flex-end'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,